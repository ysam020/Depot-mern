// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.8.1
//   protoc               v6.32.1
// source: order.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  type Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { Timestamp } from "./google/protobuf/timestamp";

export const protobufPackage = "orders";

/** Order item model */
export interface OrderItem {
  id: number;
  order_id: number;
  product_id: number;
  quantity: number;
  price: number;
  title: string;
  image: string;
}

/** Order model */
export interface Order {
  id: number;
  user_id: number;
  total: number;
  status: string;
  created_at?: Date | undefined;
  order_items: OrderItem[];
  payment_id: number;
  shipping_address: string;
}

/** Request to create an order */
export interface CreateOrderRequest {
  user_id: number;
  items: OrderItem[];
  total: number;
  payment_id: number;
  shipping_address: string;
}

/** Response after creating an order */
export interface CreateOrderResponse {
  order?: Order | undefined;
  success: boolean;
  message: string;
}

/** Request to get order by ID */
export interface GetOrderRequest {
  id: number;
}

/** Response containing an order */
export interface GetOrderResponse {
  order?: Order | undefined;
}

/** Request to list orders by user */
export interface ListOrdersByUserRequest {
  user_id: number;
}

/** Response containing multiple orders */
export interface ListOrdersByUserResponse {
  orders: Order[];
}

/** Request to update order status */
export interface UpdateOrderStatusRequest {
  id: number;
  status: string;
}

/** Response after updating order status */
export interface UpdateOrderStatusResponse {
  order?: Order | undefined;
  success: boolean;
  message: string;
}

function createBaseOrderItem(): OrderItem {
  return { id: 0, order_id: 0, product_id: 0, quantity: 0, price: 0, title: "", image: "" };
}

export const OrderItem: MessageFns<OrderItem> = {
  encode(message: OrderItem, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.order_id !== 0) {
      writer.uint32(16).int32(message.order_id);
    }
    if (message.product_id !== 0) {
      writer.uint32(24).int32(message.product_id);
    }
    if (message.quantity !== 0) {
      writer.uint32(32).int32(message.quantity);
    }
    if (message.price !== 0) {
      writer.uint32(41).double(message.price);
    }
    if (message.title !== "") {
      writer.uint32(50).string(message.title);
    }
    if (message.image !== "") {
      writer.uint32(58).string(message.image);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OrderItem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrderItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.order_id = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.product_id = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.quantity = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 41) {
            break;
          }

          message.price = reader.double();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.image = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OrderItem {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      order_id: isSet(object.order_id) ? globalThis.Number(object.order_id) : 0,
      product_id: isSet(object.product_id) ? globalThis.Number(object.product_id) : 0,
      quantity: isSet(object.quantity) ? globalThis.Number(object.quantity) : 0,
      price: isSet(object.price) ? globalThis.Number(object.price) : 0,
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      image: isSet(object.image) ? globalThis.String(object.image) : "",
    };
  },

  toJSON(message: OrderItem): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.order_id !== 0) {
      obj.order_id = Math.round(message.order_id);
    }
    if (message.product_id !== 0) {
      obj.product_id = Math.round(message.product_id);
    }
    if (message.quantity !== 0) {
      obj.quantity = Math.round(message.quantity);
    }
    if (message.price !== 0) {
      obj.price = message.price;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.image !== "") {
      obj.image = message.image;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OrderItem>, I>>(base?: I): OrderItem {
    return OrderItem.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OrderItem>, I>>(object: I): OrderItem {
    const message = createBaseOrderItem();
    message.id = object.id ?? 0;
    message.order_id = object.order_id ?? 0;
    message.product_id = object.product_id ?? 0;
    message.quantity = object.quantity ?? 0;
    message.price = object.price ?? 0;
    message.title = object.title ?? "";
    message.image = object.image ?? "";
    return message;
  },
};

function createBaseOrder(): Order {
  return { id: 0, user_id: 0, total: 0, status: "", order_items: [], payment_id: 0, shipping_address: "" };
}

export const Order: MessageFns<Order> = {
  encode(message: Order, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.user_id !== 0) {
      writer.uint32(16).int32(message.user_id);
    }
    if (message.total !== 0) {
      writer.uint32(25).double(message.total);
    }
    if (message.status !== "") {
      writer.uint32(34).string(message.status);
    }
    if (message.created_at !== undefined) {
      Timestamp.encode(toTimestamp(message.created_at), writer.uint32(42).fork()).join();
    }
    for (const v of message.order_items) {
      OrderItem.encode(v!, writer.uint32(50).fork()).join();
    }
    if (message.payment_id !== 0) {
      writer.uint32(56).int32(message.payment_id);
    }
    if (message.shipping_address !== "") {
      writer.uint32(66).string(message.shipping_address);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Order {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrder();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.user_id = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.total = reader.double();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.created_at = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.order_items.push(OrderItem.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.payment_id = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.shipping_address = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Order {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      user_id: isSet(object.user_id) ? globalThis.Number(object.user_id) : 0,
      total: isSet(object.total) ? globalThis.Number(object.total) : 0,
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      created_at: isSet(object.created_at) ? fromJsonTimestamp(object.created_at) : undefined,
      order_items: globalThis.Array.isArray(object?.order_items)
        ? object.order_items.map((e: any) => OrderItem.fromJSON(e))
        : [],
      payment_id: isSet(object.payment_id) ? globalThis.Number(object.payment_id) : 0,
      shipping_address: isSet(object.shipping_address) ? globalThis.String(object.shipping_address) : "",
    };
  },

  toJSON(message: Order): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.user_id !== 0) {
      obj.user_id = Math.round(message.user_id);
    }
    if (message.total !== 0) {
      obj.total = message.total;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.created_at !== undefined) {
      obj.created_at = message.created_at.toISOString();
    }
    if (message.order_items?.length) {
      obj.order_items = message.order_items.map((e) => OrderItem.toJSON(e));
    }
    if (message.payment_id !== 0) {
      obj.payment_id = Math.round(message.payment_id);
    }
    if (message.shipping_address !== "") {
      obj.shipping_address = message.shipping_address;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Order>, I>>(base?: I): Order {
    return Order.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Order>, I>>(object: I): Order {
    const message = createBaseOrder();
    message.id = object.id ?? 0;
    message.user_id = object.user_id ?? 0;
    message.total = object.total ?? 0;
    message.status = object.status ?? "";
    message.created_at = object.created_at ?? undefined;
    message.order_items = object.order_items?.map((e) => OrderItem.fromPartial(e)) || [];
    message.payment_id = object.payment_id ?? 0;
    message.shipping_address = object.shipping_address ?? "";
    return message;
  },
};

function createBaseCreateOrderRequest(): CreateOrderRequest {
  return { user_id: 0, items: [], total: 0, payment_id: 0, shipping_address: "" };
}

export const CreateOrderRequest: MessageFns<CreateOrderRequest> = {
  encode(message: CreateOrderRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.user_id !== 0) {
      writer.uint32(8).int32(message.user_id);
    }
    for (const v of message.items) {
      OrderItem.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.total !== 0) {
      writer.uint32(25).double(message.total);
    }
    if (message.payment_id !== 0) {
      writer.uint32(32).int32(message.payment_id);
    }
    if (message.shipping_address !== "") {
      writer.uint32(42).string(message.shipping_address);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateOrderRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateOrderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.user_id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.items.push(OrderItem.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.total = reader.double();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.payment_id = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.shipping_address = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateOrderRequest {
    return {
      user_id: isSet(object.user_id) ? globalThis.Number(object.user_id) : 0,
      items: globalThis.Array.isArray(object?.items) ? object.items.map((e: any) => OrderItem.fromJSON(e)) : [],
      total: isSet(object.total) ? globalThis.Number(object.total) : 0,
      payment_id: isSet(object.payment_id) ? globalThis.Number(object.payment_id) : 0,
      shipping_address: isSet(object.shipping_address) ? globalThis.String(object.shipping_address) : "",
    };
  },

  toJSON(message: CreateOrderRequest): unknown {
    const obj: any = {};
    if (message.user_id !== 0) {
      obj.user_id = Math.round(message.user_id);
    }
    if (message.items?.length) {
      obj.items = message.items.map((e) => OrderItem.toJSON(e));
    }
    if (message.total !== 0) {
      obj.total = message.total;
    }
    if (message.payment_id !== 0) {
      obj.payment_id = Math.round(message.payment_id);
    }
    if (message.shipping_address !== "") {
      obj.shipping_address = message.shipping_address;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateOrderRequest>, I>>(base?: I): CreateOrderRequest {
    return CreateOrderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateOrderRequest>, I>>(object: I): CreateOrderRequest {
    const message = createBaseCreateOrderRequest();
    message.user_id = object.user_id ?? 0;
    message.items = object.items?.map((e) => OrderItem.fromPartial(e)) || [];
    message.total = object.total ?? 0;
    message.payment_id = object.payment_id ?? 0;
    message.shipping_address = object.shipping_address ?? "";
    return message;
  },
};

function createBaseCreateOrderResponse(): CreateOrderResponse {
  return { success: false, message: "" };
}

export const CreateOrderResponse: MessageFns<CreateOrderResponse> = {
  encode(message: CreateOrderResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.order !== undefined) {
      Order.encode(message.order, writer.uint32(10).fork()).join();
    }
    if (message.success !== false) {
      writer.uint32(16).bool(message.success);
    }
    if (message.message !== "") {
      writer.uint32(26).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateOrderResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateOrderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.order = Order.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateOrderResponse {
    return {
      order: isSet(object.order) ? Order.fromJSON(object.order) : undefined,
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: CreateOrderResponse): unknown {
    const obj: any = {};
    if (message.order !== undefined) {
      obj.order = Order.toJSON(message.order);
    }
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateOrderResponse>, I>>(base?: I): CreateOrderResponse {
    return CreateOrderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateOrderResponse>, I>>(object: I): CreateOrderResponse {
    const message = createBaseCreateOrderResponse();
    message.order = (object.order !== undefined && object.order !== null) ? Order.fromPartial(object.order) : undefined;
    message.success = object.success ?? false;
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseGetOrderRequest(): GetOrderRequest {
  return { id: 0 };
}

export const GetOrderRequest: MessageFns<GetOrderRequest> = {
  encode(message: GetOrderRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetOrderRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOrderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetOrderRequest {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: GetOrderRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetOrderRequest>, I>>(base?: I): GetOrderRequest {
    return GetOrderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetOrderRequest>, I>>(object: I): GetOrderRequest {
    const message = createBaseGetOrderRequest();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseGetOrderResponse(): GetOrderResponse {
  return {};
}

export const GetOrderResponse: MessageFns<GetOrderResponse> = {
  encode(message: GetOrderResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.order !== undefined) {
      Order.encode(message.order, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetOrderResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOrderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.order = Order.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetOrderResponse {
    return { order: isSet(object.order) ? Order.fromJSON(object.order) : undefined };
  },

  toJSON(message: GetOrderResponse): unknown {
    const obj: any = {};
    if (message.order !== undefined) {
      obj.order = Order.toJSON(message.order);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetOrderResponse>, I>>(base?: I): GetOrderResponse {
    return GetOrderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetOrderResponse>, I>>(object: I): GetOrderResponse {
    const message = createBaseGetOrderResponse();
    message.order = (object.order !== undefined && object.order !== null) ? Order.fromPartial(object.order) : undefined;
    return message;
  },
};

function createBaseListOrdersByUserRequest(): ListOrdersByUserRequest {
  return { user_id: 0 };
}

export const ListOrdersByUserRequest: MessageFns<ListOrdersByUserRequest> = {
  encode(message: ListOrdersByUserRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.user_id !== 0) {
      writer.uint32(8).int32(message.user_id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListOrdersByUserRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListOrdersByUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.user_id = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListOrdersByUserRequest {
    return { user_id: isSet(object.user_id) ? globalThis.Number(object.user_id) : 0 };
  },

  toJSON(message: ListOrdersByUserRequest): unknown {
    const obj: any = {};
    if (message.user_id !== 0) {
      obj.user_id = Math.round(message.user_id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListOrdersByUserRequest>, I>>(base?: I): ListOrdersByUserRequest {
    return ListOrdersByUserRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListOrdersByUserRequest>, I>>(object: I): ListOrdersByUserRequest {
    const message = createBaseListOrdersByUserRequest();
    message.user_id = object.user_id ?? 0;
    return message;
  },
};

function createBaseListOrdersByUserResponse(): ListOrdersByUserResponse {
  return { orders: [] };
}

export const ListOrdersByUserResponse: MessageFns<ListOrdersByUserResponse> = {
  encode(message: ListOrdersByUserResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.orders) {
      Order.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListOrdersByUserResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListOrdersByUserResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.orders.push(Order.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListOrdersByUserResponse {
    return { orders: globalThis.Array.isArray(object?.orders) ? object.orders.map((e: any) => Order.fromJSON(e)) : [] };
  },

  toJSON(message: ListOrdersByUserResponse): unknown {
    const obj: any = {};
    if (message.orders?.length) {
      obj.orders = message.orders.map((e) => Order.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListOrdersByUserResponse>, I>>(base?: I): ListOrdersByUserResponse {
    return ListOrdersByUserResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListOrdersByUserResponse>, I>>(object: I): ListOrdersByUserResponse {
    const message = createBaseListOrdersByUserResponse();
    message.orders = object.orders?.map((e) => Order.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUpdateOrderStatusRequest(): UpdateOrderStatusRequest {
  return { id: 0, status: "" };
}

export const UpdateOrderStatusRequest: MessageFns<UpdateOrderStatusRequest> = {
  encode(message: UpdateOrderStatusRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.status !== "") {
      writer.uint32(18).string(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateOrderStatusRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateOrderStatusRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.status = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateOrderStatusRequest {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      status: isSet(object.status) ? globalThis.String(object.status) : "",
    };
  },

  toJSON(message: UpdateOrderStatusRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateOrderStatusRequest>, I>>(base?: I): UpdateOrderStatusRequest {
    return UpdateOrderStatusRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateOrderStatusRequest>, I>>(object: I): UpdateOrderStatusRequest {
    const message = createBaseUpdateOrderStatusRequest();
    message.id = object.id ?? 0;
    message.status = object.status ?? "";
    return message;
  },
};

function createBaseUpdateOrderStatusResponse(): UpdateOrderStatusResponse {
  return { success: false, message: "" };
}

export const UpdateOrderStatusResponse: MessageFns<UpdateOrderStatusResponse> = {
  encode(message: UpdateOrderStatusResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.order !== undefined) {
      Order.encode(message.order, writer.uint32(10).fork()).join();
    }
    if (message.success !== false) {
      writer.uint32(16).bool(message.success);
    }
    if (message.message !== "") {
      writer.uint32(26).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateOrderStatusResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateOrderStatusResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.order = Order.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateOrderStatusResponse {
    return {
      order: isSet(object.order) ? Order.fromJSON(object.order) : undefined,
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: UpdateOrderStatusResponse): unknown {
    const obj: any = {};
    if (message.order !== undefined) {
      obj.order = Order.toJSON(message.order);
    }
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateOrderStatusResponse>, I>>(base?: I): UpdateOrderStatusResponse {
    return UpdateOrderStatusResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateOrderStatusResponse>, I>>(object: I): UpdateOrderStatusResponse {
    const message = createBaseUpdateOrderStatusResponse();
    message.order = (object.order !== undefined && object.order !== null) ? Order.fromPartial(object.order) : undefined;
    message.success = object.success ?? false;
    message.message = object.message ?? "";
    return message;
  },
};

/** Order Service definition */
export type OrderServiceService = typeof OrderServiceService;
export const OrderServiceService = {
  createOrder: {
    path: "/orders.OrderService/CreateOrder",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateOrderRequest): Buffer => Buffer.from(CreateOrderRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): CreateOrderRequest => CreateOrderRequest.decode(value),
    responseSerialize: (value: CreateOrderResponse): Buffer => Buffer.from(CreateOrderResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): CreateOrderResponse => CreateOrderResponse.decode(value),
  },
  getOrder: {
    path: "/orders.OrderService/GetOrder",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetOrderRequest): Buffer => Buffer.from(GetOrderRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetOrderRequest => GetOrderRequest.decode(value),
    responseSerialize: (value: GetOrderResponse): Buffer => Buffer.from(GetOrderResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetOrderResponse => GetOrderResponse.decode(value),
  },
  listOrdersByUser: {
    path: "/orders.OrderService/ListOrdersByUser",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListOrdersByUserRequest): Buffer =>
      Buffer.from(ListOrdersByUserRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): ListOrdersByUserRequest => ListOrdersByUserRequest.decode(value),
    responseSerialize: (value: ListOrdersByUserResponse): Buffer =>
      Buffer.from(ListOrdersByUserResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): ListOrdersByUserResponse => ListOrdersByUserResponse.decode(value),
  },
  updateOrderStatus: {
    path: "/orders.OrderService/UpdateOrderStatus",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateOrderStatusRequest): Buffer =>
      Buffer.from(UpdateOrderStatusRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): UpdateOrderStatusRequest => UpdateOrderStatusRequest.decode(value),
    responseSerialize: (value: UpdateOrderStatusResponse): Buffer =>
      Buffer.from(UpdateOrderStatusResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): UpdateOrderStatusResponse => UpdateOrderStatusResponse.decode(value),
  },
} as const;

export interface OrderServiceServer extends UntypedServiceImplementation {
  createOrder: handleUnaryCall<CreateOrderRequest, CreateOrderResponse>;
  getOrder: handleUnaryCall<GetOrderRequest, GetOrderResponse>;
  listOrdersByUser: handleUnaryCall<ListOrdersByUserRequest, ListOrdersByUserResponse>;
  updateOrderStatus: handleUnaryCall<UpdateOrderStatusRequest, UpdateOrderStatusResponse>;
}

export interface OrderServiceClient extends Client {
  createOrder(
    request: CreateOrderRequest,
    callback: (error: ServiceError | null, response: CreateOrderResponse) => void,
  ): ClientUnaryCall;
  createOrder(
    request: CreateOrderRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CreateOrderResponse) => void,
  ): ClientUnaryCall;
  createOrder(
    request: CreateOrderRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CreateOrderResponse) => void,
  ): ClientUnaryCall;
  getOrder(
    request: GetOrderRequest,
    callback: (error: ServiceError | null, response: GetOrderResponse) => void,
  ): ClientUnaryCall;
  getOrder(
    request: GetOrderRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetOrderResponse) => void,
  ): ClientUnaryCall;
  getOrder(
    request: GetOrderRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetOrderResponse) => void,
  ): ClientUnaryCall;
  listOrdersByUser(
    request: ListOrdersByUserRequest,
    callback: (error: ServiceError | null, response: ListOrdersByUserResponse) => void,
  ): ClientUnaryCall;
  listOrdersByUser(
    request: ListOrdersByUserRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListOrdersByUserResponse) => void,
  ): ClientUnaryCall;
  listOrdersByUser(
    request: ListOrdersByUserRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListOrdersByUserResponse) => void,
  ): ClientUnaryCall;
  updateOrderStatus(
    request: UpdateOrderStatusRequest,
    callback: (error: ServiceError | null, response: UpdateOrderStatusResponse) => void,
  ): ClientUnaryCall;
  updateOrderStatus(
    request: UpdateOrderStatusRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UpdateOrderStatusResponse) => void,
  ): ClientUnaryCall;
  updateOrderStatus(
    request: UpdateOrderStatusRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UpdateOrderStatusResponse) => void,
  ): ClientUnaryCall;
}

export const OrderServiceClient = makeGenericClientConstructor(
  OrderServiceService,
  "orders.OrderService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): OrderServiceClient;
  service: typeof OrderServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
