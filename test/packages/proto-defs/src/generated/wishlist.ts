// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.8.1
//   protoc               v6.32.1
// source: wishlist.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  type Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "wishlists";

export interface Wishlist {
  id: number;
  title: string;
  price: number;
  image: string;
  quantity: number;
}

export interface AddToWishlistRequest {
  id: number;
}

export interface AddToWishlistResponse {
  wishlist: Wishlist[];
}

export interface RemoveFromWishlistRequest {
  id: number;
}

export interface RemoveFromWishlistResponse {
  wishlist: Wishlist[];
}

export interface GetWishlistRequest {
}

export interface GetWishlistResponse {
  wishlist: Wishlist[];
}

function createBaseWishlist(): Wishlist {
  return { id: 0, title: "", price: 0, image: "", quantity: 0 };
}

export const Wishlist: MessageFns<Wishlist> = {
  encode(message: Wishlist, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.price !== 0) {
      writer.uint32(24).int32(message.price);
    }
    if (message.image !== "") {
      writer.uint32(34).string(message.image);
    }
    if (message.quantity !== 0) {
      writer.uint32(40).int32(message.quantity);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Wishlist {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWishlist();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.price = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.image = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.quantity = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Wishlist {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      price: isSet(object.price) ? globalThis.Number(object.price) : 0,
      image: isSet(object.image) ? globalThis.String(object.image) : "",
      quantity: isSet(object.quantity) ? globalThis.Number(object.quantity) : 0,
    };
  },

  toJSON(message: Wishlist): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.price !== 0) {
      obj.price = Math.round(message.price);
    }
    if (message.image !== "") {
      obj.image = message.image;
    }
    if (message.quantity !== 0) {
      obj.quantity = Math.round(message.quantity);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Wishlist>, I>>(base?: I): Wishlist {
    return Wishlist.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Wishlist>, I>>(object: I): Wishlist {
    const message = createBaseWishlist();
    message.id = object.id ?? 0;
    message.title = object.title ?? "";
    message.price = object.price ?? 0;
    message.image = object.image ?? "";
    message.quantity = object.quantity ?? 0;
    return message;
  },
};

function createBaseAddToWishlistRequest(): AddToWishlistRequest {
  return { id: 0 };
}

export const AddToWishlistRequest: MessageFns<AddToWishlistRequest> = {
  encode(message: AddToWishlistRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddToWishlistRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddToWishlistRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddToWishlistRequest {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: AddToWishlistRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddToWishlistRequest>, I>>(base?: I): AddToWishlistRequest {
    return AddToWishlistRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddToWishlistRequest>, I>>(object: I): AddToWishlistRequest {
    const message = createBaseAddToWishlistRequest();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseAddToWishlistResponse(): AddToWishlistResponse {
  return { wishlist: [] };
}

export const AddToWishlistResponse: MessageFns<AddToWishlistResponse> = {
  encode(message: AddToWishlistResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.wishlist) {
      Wishlist.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddToWishlistResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddToWishlistResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.wishlist.push(Wishlist.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddToWishlistResponse {
    return {
      wishlist: globalThis.Array.isArray(object?.wishlist) ? object.wishlist.map((e: any) => Wishlist.fromJSON(e)) : [],
    };
  },

  toJSON(message: AddToWishlistResponse): unknown {
    const obj: any = {};
    if (message.wishlist?.length) {
      obj.wishlist = message.wishlist.map((e) => Wishlist.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddToWishlistResponse>, I>>(base?: I): AddToWishlistResponse {
    return AddToWishlistResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddToWishlistResponse>, I>>(object: I): AddToWishlistResponse {
    const message = createBaseAddToWishlistResponse();
    message.wishlist = object.wishlist?.map((e) => Wishlist.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRemoveFromWishlistRequest(): RemoveFromWishlistRequest {
  return { id: 0 };
}

export const RemoveFromWishlistRequest: MessageFns<RemoveFromWishlistRequest> = {
  encode(message: RemoveFromWishlistRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveFromWishlistRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveFromWishlistRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveFromWishlistRequest {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: RemoveFromWishlistRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveFromWishlistRequest>, I>>(base?: I): RemoveFromWishlistRequest {
    return RemoveFromWishlistRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveFromWishlistRequest>, I>>(object: I): RemoveFromWishlistRequest {
    const message = createBaseRemoveFromWishlistRequest();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseRemoveFromWishlistResponse(): RemoveFromWishlistResponse {
  return { wishlist: [] };
}

export const RemoveFromWishlistResponse: MessageFns<RemoveFromWishlistResponse> = {
  encode(message: RemoveFromWishlistResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.wishlist) {
      Wishlist.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveFromWishlistResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveFromWishlistResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.wishlist.push(Wishlist.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveFromWishlistResponse {
    return {
      wishlist: globalThis.Array.isArray(object?.wishlist) ? object.wishlist.map((e: any) => Wishlist.fromJSON(e)) : [],
    };
  },

  toJSON(message: RemoveFromWishlistResponse): unknown {
    const obj: any = {};
    if (message.wishlist?.length) {
      obj.wishlist = message.wishlist.map((e) => Wishlist.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveFromWishlistResponse>, I>>(base?: I): RemoveFromWishlistResponse {
    return RemoveFromWishlistResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveFromWishlistResponse>, I>>(object: I): RemoveFromWishlistResponse {
    const message = createBaseRemoveFromWishlistResponse();
    message.wishlist = object.wishlist?.map((e) => Wishlist.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetWishlistRequest(): GetWishlistRequest {
  return {};
}

export const GetWishlistRequest: MessageFns<GetWishlistRequest> = {
  encode(_: GetWishlistRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetWishlistRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetWishlistRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetWishlistRequest {
    return {};
  },

  toJSON(_: GetWishlistRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetWishlistRequest>, I>>(base?: I): GetWishlistRequest {
    return GetWishlistRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetWishlistRequest>, I>>(_: I): GetWishlistRequest {
    const message = createBaseGetWishlistRequest();
    return message;
  },
};

function createBaseGetWishlistResponse(): GetWishlistResponse {
  return { wishlist: [] };
}

export const GetWishlistResponse: MessageFns<GetWishlistResponse> = {
  encode(message: GetWishlistResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.wishlist) {
      Wishlist.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetWishlistResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetWishlistResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.wishlist.push(Wishlist.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetWishlistResponse {
    return {
      wishlist: globalThis.Array.isArray(object?.wishlist) ? object.wishlist.map((e: any) => Wishlist.fromJSON(e)) : [],
    };
  },

  toJSON(message: GetWishlistResponse): unknown {
    const obj: any = {};
    if (message.wishlist?.length) {
      obj.wishlist = message.wishlist.map((e) => Wishlist.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetWishlistResponse>, I>>(base?: I): GetWishlistResponse {
    return GetWishlistResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetWishlistResponse>, I>>(object: I): GetWishlistResponse {
    const message = createBaseGetWishlistResponse();
    message.wishlist = object.wishlist?.map((e) => Wishlist.fromPartial(e)) || [];
    return message;
  },
};

export type WishlistServiceService = typeof WishlistServiceService;
export const WishlistServiceService = {
  addToWishlist: {
    path: "/wishlists.WishlistService/AddToWishlist",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: AddToWishlistRequest): Buffer => Buffer.from(AddToWishlistRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): AddToWishlistRequest => AddToWishlistRequest.decode(value),
    responseSerialize: (value: AddToWishlistResponse): Buffer =>
      Buffer.from(AddToWishlistResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): AddToWishlistResponse => AddToWishlistResponse.decode(value),
  },
  removeFromWishlist: {
    path: "/wishlists.WishlistService/RemoveFromWishlist",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: RemoveFromWishlistRequest): Buffer =>
      Buffer.from(RemoveFromWishlistRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): RemoveFromWishlistRequest => RemoveFromWishlistRequest.decode(value),
    responseSerialize: (value: RemoveFromWishlistResponse): Buffer =>
      Buffer.from(RemoveFromWishlistResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): RemoveFromWishlistResponse => RemoveFromWishlistResponse.decode(value),
  },
  getWishlist: {
    path: "/wishlists.WishlistService/GetWishlist",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetWishlistRequest): Buffer => Buffer.from(GetWishlistRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetWishlistRequest => GetWishlistRequest.decode(value),
    responseSerialize: (value: GetWishlistResponse): Buffer => Buffer.from(GetWishlistResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetWishlistResponse => GetWishlistResponse.decode(value),
  },
} as const;

export interface WishlistServiceServer extends UntypedServiceImplementation {
  addToWishlist: handleUnaryCall<AddToWishlistRequest, AddToWishlistResponse>;
  removeFromWishlist: handleUnaryCall<RemoveFromWishlistRequest, RemoveFromWishlistResponse>;
  getWishlist: handleUnaryCall<GetWishlistRequest, GetWishlistResponse>;
}

export interface WishlistServiceClient extends Client {
  addToWishlist(
    request: AddToWishlistRequest,
    callback: (error: ServiceError | null, response: AddToWishlistResponse) => void,
  ): ClientUnaryCall;
  addToWishlist(
    request: AddToWishlistRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: AddToWishlistResponse) => void,
  ): ClientUnaryCall;
  addToWishlist(
    request: AddToWishlistRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: AddToWishlistResponse) => void,
  ): ClientUnaryCall;
  removeFromWishlist(
    request: RemoveFromWishlistRequest,
    callback: (error: ServiceError | null, response: RemoveFromWishlistResponse) => void,
  ): ClientUnaryCall;
  removeFromWishlist(
    request: RemoveFromWishlistRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: RemoveFromWishlistResponse) => void,
  ): ClientUnaryCall;
  removeFromWishlist(
    request: RemoveFromWishlistRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: RemoveFromWishlistResponse) => void,
  ): ClientUnaryCall;
  getWishlist(
    request: GetWishlistRequest,
    callback: (error: ServiceError | null, response: GetWishlistResponse) => void,
  ): ClientUnaryCall;
  getWishlist(
    request: GetWishlistRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetWishlistResponse) => void,
  ): ClientUnaryCall;
  getWishlist(
    request: GetWishlistRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetWishlistResponse) => void,
  ): ClientUnaryCall;
}

export const WishlistServiceClient = makeGenericClientConstructor(
  WishlistServiceService,
  "wishlists.WishlistService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): WishlistServiceClient;
  service: typeof WishlistServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
