// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.8.1
//   protoc               v6.32.1
// source: wishlist.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { makeGenericClientConstructor, } from "@grpc/grpc-js";
export const protobufPackage = "wishlists";
function createBaseWishlist() {
    return { id: 0, title: "", price: 0, image: "", quantity: 0 };
}
export const Wishlist = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== 0) {
            writer.uint32(8).int32(message.id);
        }
        if (message.title !== "") {
            writer.uint32(18).string(message.title);
        }
        if (message.price !== 0) {
            writer.uint32(24).int32(message.price);
        }
        if (message.image !== "") {
            writer.uint32(34).string(message.image);
        }
        if (message.quantity !== 0) {
            writer.uint32(40).int32(message.quantity);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWishlist();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.price = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.image = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.quantity = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.Number(object.id) : 0,
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            price: isSet(object.price) ? globalThis.Number(object.price) : 0,
            image: isSet(object.image) ? globalThis.String(object.image) : "",
            quantity: isSet(object.quantity) ? globalThis.Number(object.quantity) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== 0) {
            obj.id = Math.round(message.id);
        }
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.price !== 0) {
            obj.price = Math.round(message.price);
        }
        if (message.image !== "") {
            obj.image = message.image;
        }
        if (message.quantity !== 0) {
            obj.quantity = Math.round(message.quantity);
        }
        return obj;
    },
    create(base) {
        return Wishlist.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseWishlist();
        message.id = object.id ?? 0;
        message.title = object.title ?? "";
        message.price = object.price ?? 0;
        message.image = object.image ?? "";
        message.quantity = object.quantity ?? 0;
        return message;
    },
};
function createBaseAddToWishlistRequest() {
    return { id: 0 };
}
export const AddToWishlistRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== 0) {
            writer.uint32(8).int32(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddToWishlistRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== 0) {
            obj.id = Math.round(message.id);
        }
        return obj;
    },
    create(base) {
        return AddToWishlistRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddToWishlistRequest();
        message.id = object.id ?? 0;
        return message;
    },
};
function createBaseAddToWishlistResponse() {
    return { wishlist: [] };
}
export const AddToWishlistResponse = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.wishlist) {
            Wishlist.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddToWishlistResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.wishlist.push(Wishlist.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            wishlist: globalThis.Array.isArray(object?.wishlist) ? object.wishlist.map((e) => Wishlist.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.wishlist?.length) {
            obj.wishlist = message.wishlist.map((e) => Wishlist.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return AddToWishlistResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddToWishlistResponse();
        message.wishlist = object.wishlist?.map((e) => Wishlist.fromPartial(e)) || [];
        return message;
    },
};
function createBaseRemoveFromWishlistRequest() {
    return { id: 0 };
}
export const RemoveFromWishlistRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== 0) {
            writer.uint32(8).int32(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveFromWishlistRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== 0) {
            obj.id = Math.round(message.id);
        }
        return obj;
    },
    create(base) {
        return RemoveFromWishlistRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRemoveFromWishlistRequest();
        message.id = object.id ?? 0;
        return message;
    },
};
function createBaseRemoveFromWishlistResponse() {
    return { wishlist: [] };
}
export const RemoveFromWishlistResponse = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.wishlist) {
            Wishlist.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveFromWishlistResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.wishlist.push(Wishlist.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            wishlist: globalThis.Array.isArray(object?.wishlist) ? object.wishlist.map((e) => Wishlist.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.wishlist?.length) {
            obj.wishlist = message.wishlist.map((e) => Wishlist.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return RemoveFromWishlistResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRemoveFromWishlistResponse();
        message.wishlist = object.wishlist?.map((e) => Wishlist.fromPartial(e)) || [];
        return message;
    },
};
function createBaseGetWishlistRequest() {
    return {};
}
export const GetWishlistRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetWishlistRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return GetWishlistRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseGetWishlistRequest();
        return message;
    },
};
function createBaseGetWishlistResponse() {
    return { wishlist: [] };
}
export const GetWishlistResponse = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.wishlist) {
            Wishlist.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetWishlistResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.wishlist.push(Wishlist.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            wishlist: globalThis.Array.isArray(object?.wishlist) ? object.wishlist.map((e) => Wishlist.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.wishlist?.length) {
            obj.wishlist = message.wishlist.map((e) => Wishlist.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return GetWishlistResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetWishlistResponse();
        message.wishlist = object.wishlist?.map((e) => Wishlist.fromPartial(e)) || [];
        return message;
    },
};
export const WishlistServiceService = {
    addToWishlist: {
        path: "/wishlists.WishlistService/AddToWishlist",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(AddToWishlistRequest.encode(value).finish()),
        requestDeserialize: (value) => AddToWishlistRequest.decode(value),
        responseSerialize: (value) => Buffer.from(AddToWishlistResponse.encode(value).finish()),
        responseDeserialize: (value) => AddToWishlistResponse.decode(value),
    },
    removeFromWishlist: {
        path: "/wishlists.WishlistService/RemoveFromWishlist",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(RemoveFromWishlistRequest.encode(value).finish()),
        requestDeserialize: (value) => RemoveFromWishlistRequest.decode(value),
        responseSerialize: (value) => Buffer.from(RemoveFromWishlistResponse.encode(value).finish()),
        responseDeserialize: (value) => RemoveFromWishlistResponse.decode(value),
    },
    getWishlist: {
        path: "/wishlists.WishlistService/GetWishlist",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(GetWishlistRequest.encode(value).finish()),
        requestDeserialize: (value) => GetWishlistRequest.decode(value),
        responseSerialize: (value) => Buffer.from(GetWishlistResponse.encode(value).finish()),
        responseDeserialize: (value) => GetWishlistResponse.decode(value),
    },
};
export const WishlistServiceClient = makeGenericClientConstructor(WishlistServiceService, "wishlists.WishlistService");
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=wishlist.js.map