// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.8.1
//   protoc               v6.32.1
// source: payment.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { makeGenericClientConstructor, } from "@grpc/grpc-js";
export const protobufPackage = "payments";
function createBasePayment() {
    return {
        id: "",
        order_id: 0,
        razorpay_order_id: "",
        razorpay_payment_id: "",
        razorpay_signature: "",
        amount: 0,
        currency: "",
        status: "",
        payment_method: "",
        user_id: 0,
    };
}
export const Payment = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.order_id !== 0) {
            writer.uint32(16).int32(message.order_id);
        }
        if (message.razorpay_order_id !== "") {
            writer.uint32(26).string(message.razorpay_order_id);
        }
        if (message.razorpay_payment_id !== "") {
            writer.uint32(34).string(message.razorpay_payment_id);
        }
        if (message.razorpay_signature !== "") {
            writer.uint32(42).string(message.razorpay_signature);
        }
        if (message.amount !== 0) {
            writer.uint32(48).int32(message.amount);
        }
        if (message.currency !== "") {
            writer.uint32(58).string(message.currency);
        }
        if (message.status !== "") {
            writer.uint32(66).string(message.status);
        }
        if (message.payment_method !== "") {
            writer.uint32(74).string(message.payment_method);
        }
        if (message.user_id !== 0) {
            writer.uint32(80).int32(message.user_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePayment();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.order_id = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.razorpay_order_id = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.razorpay_payment_id = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.razorpay_signature = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.amount = reader.int32();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.currency = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.status = reader.string();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.payment_method = reader.string();
                    continue;
                }
                case 10: {
                    if (tag !== 80) {
                        break;
                    }
                    message.user_id = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            order_id: isSet(object.order_id) ? globalThis.Number(object.order_id) : 0,
            razorpay_order_id: isSet(object.razorpay_order_id) ? globalThis.String(object.razorpay_order_id) : "",
            razorpay_payment_id: isSet(object.razorpay_payment_id) ? globalThis.String(object.razorpay_payment_id) : "",
            razorpay_signature: isSet(object.razorpay_signature) ? globalThis.String(object.razorpay_signature) : "",
            amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
            currency: isSet(object.currency) ? globalThis.String(object.currency) : "",
            status: isSet(object.status) ? globalThis.String(object.status) : "",
            payment_method: isSet(object.payment_method) ? globalThis.String(object.payment_method) : "",
            user_id: isSet(object.user_id) ? globalThis.Number(object.user_id) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.order_id !== 0) {
            obj.order_id = Math.round(message.order_id);
        }
        if (message.razorpay_order_id !== "") {
            obj.razorpay_order_id = message.razorpay_order_id;
        }
        if (message.razorpay_payment_id !== "") {
            obj.razorpay_payment_id = message.razorpay_payment_id;
        }
        if (message.razorpay_signature !== "") {
            obj.razorpay_signature = message.razorpay_signature;
        }
        if (message.amount !== 0) {
            obj.amount = Math.round(message.amount);
        }
        if (message.currency !== "") {
            obj.currency = message.currency;
        }
        if (message.status !== "") {
            obj.status = message.status;
        }
        if (message.payment_method !== "") {
            obj.payment_method = message.payment_method;
        }
        if (message.user_id !== 0) {
            obj.user_id = Math.round(message.user_id);
        }
        return obj;
    },
    create(base) {
        return Payment.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePayment();
        message.id = object.id ?? "";
        message.order_id = object.order_id ?? 0;
        message.razorpay_order_id = object.razorpay_order_id ?? "";
        message.razorpay_payment_id = object.razorpay_payment_id ?? "";
        message.razorpay_signature = object.razorpay_signature ?? "";
        message.amount = object.amount ?? 0;
        message.currency = object.currency ?? "";
        message.status = object.status ?? "";
        message.payment_method = object.payment_method ?? "";
        message.user_id = object.user_id ?? 0;
        return message;
    },
};
function createBaseCreateOrderRequest() {
    return { amount: 0, currency: "", receipt: "" };
}
export const CreateOrderRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.amount !== 0) {
            writer.uint32(8).int32(message.amount);
        }
        if (message.currency !== "") {
            writer.uint32(18).string(message.currency);
        }
        if (message.receipt !== "") {
            writer.uint32(26).string(message.receipt);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateOrderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.amount = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.currency = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.receipt = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
            currency: isSet(object.currency) ? globalThis.String(object.currency) : "",
            receipt: isSet(object.receipt) ? globalThis.String(object.receipt) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.amount !== 0) {
            obj.amount = Math.round(message.amount);
        }
        if (message.currency !== "") {
            obj.currency = message.currency;
        }
        if (message.receipt !== "") {
            obj.receipt = message.receipt;
        }
        return obj;
    },
    create(base) {
        return CreateOrderRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCreateOrderRequest();
        message.amount = object.amount ?? 0;
        message.currency = object.currency ?? "";
        message.receipt = object.receipt ?? "";
        return message;
    },
};
function createBaseCreateOrderResponse() {
    return { razorpay_order_id: "", amount: 0, currency: "", key_id: "" };
}
export const CreateOrderResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.razorpay_order_id !== "") {
            writer.uint32(10).string(message.razorpay_order_id);
        }
        if (message.amount !== 0) {
            writer.uint32(16).int32(message.amount);
        }
        if (message.currency !== "") {
            writer.uint32(26).string(message.currency);
        }
        if (message.key_id !== "") {
            writer.uint32(34).string(message.key_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateOrderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.razorpay_order_id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.amount = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.currency = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.key_id = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            razorpay_order_id: isSet(object.razorpay_order_id) ? globalThis.String(object.razorpay_order_id) : "",
            amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
            currency: isSet(object.currency) ? globalThis.String(object.currency) : "",
            key_id: isSet(object.key_id) ? globalThis.String(object.key_id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.razorpay_order_id !== "") {
            obj.razorpay_order_id = message.razorpay_order_id;
        }
        if (message.amount !== 0) {
            obj.amount = Math.round(message.amount);
        }
        if (message.currency !== "") {
            obj.currency = message.currency;
        }
        if (message.key_id !== "") {
            obj.key_id = message.key_id;
        }
        return obj;
    },
    create(base) {
        return CreateOrderResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCreateOrderResponse();
        message.razorpay_order_id = object.razorpay_order_id ?? "";
        message.amount = object.amount ?? 0;
        message.currency = object.currency ?? "";
        message.key_id = object.key_id ?? "";
        return message;
    },
};
function createBaseCartItem() {
    return { id: 0, title: "", price: 0, image: "", quantity: 0 };
}
export const CartItem = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== 0) {
            writer.uint32(8).int32(message.id);
        }
        if (message.title !== "") {
            writer.uint32(18).string(message.title);
        }
        if (message.price !== 0) {
            writer.uint32(24).int32(message.price);
        }
        if (message.image !== "") {
            writer.uint32(34).string(message.image);
        }
        if (message.quantity !== 0) {
            writer.uint32(40).int32(message.quantity);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCartItem();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.price = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.image = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.quantity = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.Number(object.id) : 0,
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            price: isSet(object.price) ? globalThis.Number(object.price) : 0,
            image: isSet(object.image) ? globalThis.String(object.image) : "",
            quantity: isSet(object.quantity) ? globalThis.Number(object.quantity) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== 0) {
            obj.id = Math.round(message.id);
        }
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.price !== 0) {
            obj.price = Math.round(message.price);
        }
        if (message.image !== "") {
            obj.image = message.image;
        }
        if (message.quantity !== 0) {
            obj.quantity = Math.round(message.quantity);
        }
        return obj;
    },
    create(base) {
        return CartItem.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCartItem();
        message.id = object.id ?? 0;
        message.title = object.title ?? "";
        message.price = object.price ?? 0;
        message.image = object.image ?? "";
        message.quantity = object.quantity ?? 0;
        return message;
    },
};
function createBaseShippingAddress() {
    return { first_name: "", last_name: "", address: "", city: "", state: "", pincode: "", phone: "" };
}
export const ShippingAddress = {
    encode(message, writer = new BinaryWriter()) {
        if (message.first_name !== "") {
            writer.uint32(10).string(message.first_name);
        }
        if (message.last_name !== "") {
            writer.uint32(18).string(message.last_name);
        }
        if (message.address !== "") {
            writer.uint32(26).string(message.address);
        }
        if (message.city !== "") {
            writer.uint32(34).string(message.city);
        }
        if (message.state !== "") {
            writer.uint32(42).string(message.state);
        }
        if (message.pincode !== "") {
            writer.uint32(50).string(message.pincode);
        }
        if (message.phone !== "") {
            writer.uint32(58).string(message.phone);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseShippingAddress();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.first_name = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.last_name = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.city = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.state = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.pincode = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.phone = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            first_name: isSet(object.first_name) ? globalThis.String(object.first_name) : "",
            last_name: isSet(object.last_name) ? globalThis.String(object.last_name) : "",
            address: isSet(object.address) ? globalThis.String(object.address) : "",
            city: isSet(object.city) ? globalThis.String(object.city) : "",
            state: isSet(object.state) ? globalThis.String(object.state) : "",
            pincode: isSet(object.pincode) ? globalThis.String(object.pincode) : "",
            phone: isSet(object.phone) ? globalThis.String(object.phone) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.first_name !== "") {
            obj.first_name = message.first_name;
        }
        if (message.last_name !== "") {
            obj.last_name = message.last_name;
        }
        if (message.address !== "") {
            obj.address = message.address;
        }
        if (message.city !== "") {
            obj.city = message.city;
        }
        if (message.state !== "") {
            obj.state = message.state;
        }
        if (message.pincode !== "") {
            obj.pincode = message.pincode;
        }
        if (message.phone !== "") {
            obj.phone = message.phone;
        }
        return obj;
    },
    create(base) {
        return ShippingAddress.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseShippingAddress();
        message.first_name = object.first_name ?? "";
        message.last_name = object.last_name ?? "";
        message.address = object.address ?? "";
        message.city = object.city ?? "";
        message.state = object.state ?? "";
        message.pincode = object.pincode ?? "";
        message.phone = object.phone ?? "";
        return message;
    },
};
function createBaseVerifyPaymentRequest() {
    return {
        razorpay_order_id: "",
        razorpay_payment_id: "",
        razorpay_signature: "",
        amount: 0,
        user_id: 0,
        cart_items: [],
    };
}
export const VerifyPaymentRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.razorpay_order_id !== "") {
            writer.uint32(10).string(message.razorpay_order_id);
        }
        if (message.razorpay_payment_id !== "") {
            writer.uint32(18).string(message.razorpay_payment_id);
        }
        if (message.razorpay_signature !== "") {
            writer.uint32(26).string(message.razorpay_signature);
        }
        if (message.amount !== 0) {
            writer.uint32(32).int32(message.amount);
        }
        if (message.user_id !== 0) {
            writer.uint32(40).int32(message.user_id);
        }
        for (const v of message.cart_items) {
            CartItem.encode(v, writer.uint32(50).fork()).join();
        }
        if (message.shipping_address !== undefined) {
            ShippingAddress.encode(message.shipping_address, writer.uint32(58).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseVerifyPaymentRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.razorpay_order_id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.razorpay_payment_id = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.razorpay_signature = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.amount = reader.int32();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.user_id = reader.int32();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.cart_items.push(CartItem.decode(reader, reader.uint32()));
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.shipping_address = ShippingAddress.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            razorpay_order_id: isSet(object.razorpay_order_id) ? globalThis.String(object.razorpay_order_id) : "",
            razorpay_payment_id: isSet(object.razorpay_payment_id) ? globalThis.String(object.razorpay_payment_id) : "",
            razorpay_signature: isSet(object.razorpay_signature) ? globalThis.String(object.razorpay_signature) : "",
            amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
            user_id: isSet(object.user_id) ? globalThis.Number(object.user_id) : 0,
            cart_items: globalThis.Array.isArray(object?.cart_items)
                ? object.cart_items.map((e) => CartItem.fromJSON(e))
                : [],
            shipping_address: isSet(object.shipping_address) ? ShippingAddress.fromJSON(object.shipping_address) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.razorpay_order_id !== "") {
            obj.razorpay_order_id = message.razorpay_order_id;
        }
        if (message.razorpay_payment_id !== "") {
            obj.razorpay_payment_id = message.razorpay_payment_id;
        }
        if (message.razorpay_signature !== "") {
            obj.razorpay_signature = message.razorpay_signature;
        }
        if (message.amount !== 0) {
            obj.amount = Math.round(message.amount);
        }
        if (message.user_id !== 0) {
            obj.user_id = Math.round(message.user_id);
        }
        if (message.cart_items?.length) {
            obj.cart_items = message.cart_items.map((e) => CartItem.toJSON(e));
        }
        if (message.shipping_address !== undefined) {
            obj.shipping_address = ShippingAddress.toJSON(message.shipping_address);
        }
        return obj;
    },
    create(base) {
        return VerifyPaymentRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseVerifyPaymentRequest();
        message.razorpay_order_id = object.razorpay_order_id ?? "";
        message.razorpay_payment_id = object.razorpay_payment_id ?? "";
        message.razorpay_signature = object.razorpay_signature ?? "";
        message.amount = object.amount ?? 0;
        message.user_id = object.user_id ?? 0;
        message.cart_items = object.cart_items?.map((e) => CartItem.fromPartial(e)) || [];
        message.shipping_address = (object.shipping_address !== undefined && object.shipping_address !== null)
            ? ShippingAddress.fromPartial(object.shipping_address)
            : undefined;
        return message;
    },
};
function createBaseVerifyPaymentResponse() {
    return { success: false, message: "" };
}
export const VerifyPaymentResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.success !== false) {
            writer.uint32(8).bool(message.success);
        }
        if (message.message !== "") {
            writer.uint32(18).string(message.message);
        }
        if (message.payment !== undefined) {
            Payment.encode(message.payment, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseVerifyPaymentResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.success = reader.bool();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.payment = Payment.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
            message: isSet(object.message) ? globalThis.String(object.message) : "",
            payment: isSet(object.payment) ? Payment.fromJSON(object.payment) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.success !== false) {
            obj.success = message.success;
        }
        if (message.message !== "") {
            obj.message = message.message;
        }
        if (message.payment !== undefined) {
            obj.payment = Payment.toJSON(message.payment);
        }
        return obj;
    },
    create(base) {
        return VerifyPaymentResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseVerifyPaymentResponse();
        message.success = object.success ?? false;
        message.message = object.message ?? "";
        message.payment = (object.payment !== undefined && object.payment !== null)
            ? Payment.fromPartial(object.payment)
            : undefined;
        return message;
    },
};
export const PaymentServiceService = {
    createOrder: {
        path: "/payments.PaymentService/CreateOrder",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(CreateOrderRequest.encode(value).finish()),
        requestDeserialize: (value) => CreateOrderRequest.decode(value),
        responseSerialize: (value) => Buffer.from(CreateOrderResponse.encode(value).finish()),
        responseDeserialize: (value) => CreateOrderResponse.decode(value),
    },
    verifyPayment: {
        path: "/payments.PaymentService/VerifyPayment",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(VerifyPaymentRequest.encode(value).finish()),
        requestDeserialize: (value) => VerifyPaymentRequest.decode(value),
        responseSerialize: (value) => Buffer.from(VerifyPaymentResponse.encode(value).finish()),
        responseDeserialize: (value) => VerifyPaymentResponse.decode(value),
    },
};
export const PaymentServiceClient = makeGenericClientConstructor(PaymentServiceService, "payments.PaymentService");
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=payment.js.map