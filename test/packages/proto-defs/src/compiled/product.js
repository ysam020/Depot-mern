// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.8.1
//   protoc               v6.32.1
// source: product.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { makeGenericClientConstructor, } from "@grpc/grpc-js";
export const protobufPackage = "products";
function createBaseProduct() {
    return {
        id: 0,
        title: "",
        price: 0,
        short_description: "",
        description: "",
        category: "",
        tags: [],
        sku: "",
        weight: "",
        dimensions: "",
        color: "",
        material: "",
        image: "",
        rating: 0,
        qty: 0,
    };
}
export const Product = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== 0) {
            writer.uint32(8).int32(message.id);
        }
        if (message.title !== "") {
            writer.uint32(18).string(message.title);
        }
        if (message.price !== 0) {
            writer.uint32(25).double(message.price);
        }
        if (message.short_description !== "") {
            writer.uint32(34).string(message.short_description);
        }
        if (message.description !== "") {
            writer.uint32(42).string(message.description);
        }
        if (message.category !== "") {
            writer.uint32(50).string(message.category);
        }
        for (const v of message.tags) {
            writer.uint32(58).string(v);
        }
        if (message.sku !== "") {
            writer.uint32(66).string(message.sku);
        }
        if (message.weight !== "") {
            writer.uint32(74).string(message.weight);
        }
        if (message.dimensions !== "") {
            writer.uint32(82).string(message.dimensions);
        }
        if (message.color !== "") {
            writer.uint32(90).string(message.color);
        }
        if (message.material !== "") {
            writer.uint32(98).string(message.material);
        }
        if (message.image !== "") {
            writer.uint32(106).string(message.image);
        }
        if (message.rating !== 0) {
            writer.uint32(113).double(message.rating);
        }
        if (message.qty !== 0) {
            writer.uint32(120).int32(message.qty);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseProduct();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 25) {
                        break;
                    }
                    message.price = reader.double();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.short_description = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.category = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.tags.push(reader.string());
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.sku = reader.string();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.weight = reader.string();
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.dimensions = reader.string();
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.color = reader.string();
                    continue;
                }
                case 12: {
                    if (tag !== 98) {
                        break;
                    }
                    message.material = reader.string();
                    continue;
                }
                case 13: {
                    if (tag !== 106) {
                        break;
                    }
                    message.image = reader.string();
                    continue;
                }
                case 14: {
                    if (tag !== 113) {
                        break;
                    }
                    message.rating = reader.double();
                    continue;
                }
                case 15: {
                    if (tag !== 120) {
                        break;
                    }
                    message.qty = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.Number(object.id) : 0,
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            price: isSet(object.price) ? globalThis.Number(object.price) : 0,
            short_description: isSet(object.short_description) ? globalThis.String(object.short_description) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            category: isSet(object.category) ? globalThis.String(object.category) : "",
            tags: globalThis.Array.isArray(object?.tags) ? object.tags.map((e) => globalThis.String(e)) : [],
            sku: isSet(object.sku) ? globalThis.String(object.sku) : "",
            weight: isSet(object.weight) ? globalThis.String(object.weight) : "",
            dimensions: isSet(object.dimensions) ? globalThis.String(object.dimensions) : "",
            color: isSet(object.color) ? globalThis.String(object.color) : "",
            material: isSet(object.material) ? globalThis.String(object.material) : "",
            image: isSet(object.image) ? globalThis.String(object.image) : "",
            rating: isSet(object.rating) ? globalThis.Number(object.rating) : 0,
            qty: isSet(object.qty) ? globalThis.Number(object.qty) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== 0) {
            obj.id = Math.round(message.id);
        }
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.price !== 0) {
            obj.price = message.price;
        }
        if (message.short_description !== "") {
            obj.short_description = message.short_description;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.category !== "") {
            obj.category = message.category;
        }
        if (message.tags?.length) {
            obj.tags = message.tags;
        }
        if (message.sku !== "") {
            obj.sku = message.sku;
        }
        if (message.weight !== "") {
            obj.weight = message.weight;
        }
        if (message.dimensions !== "") {
            obj.dimensions = message.dimensions;
        }
        if (message.color !== "") {
            obj.color = message.color;
        }
        if (message.material !== "") {
            obj.material = message.material;
        }
        if (message.image !== "") {
            obj.image = message.image;
        }
        if (message.rating !== 0) {
            obj.rating = message.rating;
        }
        if (message.qty !== 0) {
            obj.qty = Math.round(message.qty);
        }
        return obj;
    },
    create(base) {
        return Product.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseProduct();
        message.id = object.id ?? 0;
        message.title = object.title ?? "";
        message.price = object.price ?? 0;
        message.short_description = object.short_description ?? "";
        message.description = object.description ?? "";
        message.category = object.category ?? "";
        message.tags = object.tags?.map((e) => e) || [];
        message.sku = object.sku ?? "";
        message.weight = object.weight ?? "";
        message.dimensions = object.dimensions ?? "";
        message.color = object.color ?? "";
        message.material = object.material ?? "";
        message.image = object.image ?? "";
        message.rating = object.rating ?? 0;
        message.qty = object.qty ?? 0;
        return message;
    },
};
function createBaseGetProductRequest() {
    return { id: 0 };
}
export const GetProductRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== 0) {
            writer.uint32(8).int32(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetProductRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== 0) {
            obj.id = Math.round(message.id);
        }
        return obj;
    },
    create(base) {
        return GetProductRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetProductRequest();
        message.id = object.id ?? 0;
        return message;
    },
};
function createBaseGetProductResponse() {
    return { product: undefined };
}
export const GetProductResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.product !== undefined) {
            Product.encode(message.product, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetProductResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.product = Product.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { product: isSet(object.product) ? Product.fromJSON(object.product) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.product !== undefined) {
            obj.product = Product.toJSON(message.product);
        }
        return obj;
    },
    create(base) {
        return GetProductResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetProductResponse();
        message.product = (object.product !== undefined && object.product !== null)
            ? Product.fromPartial(object.product)
            : undefined;
        return message;
    },
};
function createBaseCreateProductRequest() {
    return {
        title: "",
        price: 0,
        short_description: "",
        description: "",
        category: "",
        tags: [],
        sku: "",
        weight: "",
        dimensions: "",
        color: "",
        material: "",
        image: "",
        rating: 0,
        qty: 0,
    };
}
export const CreateProductRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.title !== "") {
            writer.uint32(10).string(message.title);
        }
        if (message.price !== 0) {
            writer.uint32(17).double(message.price);
        }
        if (message.short_description !== "") {
            writer.uint32(26).string(message.short_description);
        }
        if (message.description !== "") {
            writer.uint32(34).string(message.description);
        }
        if (message.category !== "") {
            writer.uint32(42).string(message.category);
        }
        for (const v of message.tags) {
            writer.uint32(50).string(v);
        }
        if (message.sku !== "") {
            writer.uint32(58).string(message.sku);
        }
        if (message.weight !== "") {
            writer.uint32(66).string(message.weight);
        }
        if (message.dimensions !== "") {
            writer.uint32(74).string(message.dimensions);
        }
        if (message.color !== "") {
            writer.uint32(82).string(message.color);
        }
        if (message.material !== "") {
            writer.uint32(90).string(message.material);
        }
        if (message.image !== "") {
            writer.uint32(98).string(message.image);
        }
        if (message.rating !== 0) {
            writer.uint32(105).double(message.rating);
        }
        if (message.qty !== 0) {
            writer.uint32(112).int32(message.qty);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateProductRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 17) {
                        break;
                    }
                    message.price = reader.double();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.short_description = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.category = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.tags.push(reader.string());
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.sku = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.weight = reader.string();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.dimensions = reader.string();
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.color = reader.string();
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.material = reader.string();
                    continue;
                }
                case 12: {
                    if (tag !== 98) {
                        break;
                    }
                    message.image = reader.string();
                    continue;
                }
                case 13: {
                    if (tag !== 105) {
                        break;
                    }
                    message.rating = reader.double();
                    continue;
                }
                case 14: {
                    if (tag !== 112) {
                        break;
                    }
                    message.qty = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            price: isSet(object.price) ? globalThis.Number(object.price) : 0,
            short_description: isSet(object.short_description) ? globalThis.String(object.short_description) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            category: isSet(object.category) ? globalThis.String(object.category) : "",
            tags: globalThis.Array.isArray(object?.tags) ? object.tags.map((e) => globalThis.String(e)) : [],
            sku: isSet(object.sku) ? globalThis.String(object.sku) : "",
            weight: isSet(object.weight) ? globalThis.String(object.weight) : "",
            dimensions: isSet(object.dimensions) ? globalThis.String(object.dimensions) : "",
            color: isSet(object.color) ? globalThis.String(object.color) : "",
            material: isSet(object.material) ? globalThis.String(object.material) : "",
            image: isSet(object.image) ? globalThis.String(object.image) : "",
            rating: isSet(object.rating) ? globalThis.Number(object.rating) : 0,
            qty: isSet(object.qty) ? globalThis.Number(object.qty) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.price !== 0) {
            obj.price = message.price;
        }
        if (message.short_description !== "") {
            obj.short_description = message.short_description;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.category !== "") {
            obj.category = message.category;
        }
        if (message.tags?.length) {
            obj.tags = message.tags;
        }
        if (message.sku !== "") {
            obj.sku = message.sku;
        }
        if (message.weight !== "") {
            obj.weight = message.weight;
        }
        if (message.dimensions !== "") {
            obj.dimensions = message.dimensions;
        }
        if (message.color !== "") {
            obj.color = message.color;
        }
        if (message.material !== "") {
            obj.material = message.material;
        }
        if (message.image !== "") {
            obj.image = message.image;
        }
        if (message.rating !== 0) {
            obj.rating = message.rating;
        }
        if (message.qty !== 0) {
            obj.qty = Math.round(message.qty);
        }
        return obj;
    },
    create(base) {
        return CreateProductRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCreateProductRequest();
        message.title = object.title ?? "";
        message.price = object.price ?? 0;
        message.short_description = object.short_description ?? "";
        message.description = object.description ?? "";
        message.category = object.category ?? "";
        message.tags = object.tags?.map((e) => e) || [];
        message.sku = object.sku ?? "";
        message.weight = object.weight ?? "";
        message.dimensions = object.dimensions ?? "";
        message.color = object.color ?? "";
        message.material = object.material ?? "";
        message.image = object.image ?? "";
        message.rating = object.rating ?? 0;
        message.qty = object.qty ?? 0;
        return message;
    },
};
function createBaseCreateProductResponse() {
    return { product: undefined };
}
export const CreateProductResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.product !== undefined) {
            Product.encode(message.product, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateProductResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.product = Product.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { product: isSet(object.product) ? Product.fromJSON(object.product) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.product !== undefined) {
            obj.product = Product.toJSON(message.product);
        }
        return obj;
    },
    create(base) {
        return CreateProductResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCreateProductResponse();
        message.product = (object.product !== undefined && object.product !== null)
            ? Product.fromPartial(object.product)
            : undefined;
        return message;
    },
};
function createBaseListProductsRequest() {
    return { limit: 0, offset: 0 };
}
export const ListProductsRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.limit !== 0) {
            writer.uint32(8).int32(message.limit);
        }
        if (message.offset !== 0) {
            writer.uint32(16).int32(message.offset);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListProductsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.limit = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.offset = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
            offset: isSet(object.offset) ? globalThis.Number(object.offset) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.limit !== 0) {
            obj.limit = Math.round(message.limit);
        }
        if (message.offset !== 0) {
            obj.offset = Math.round(message.offset);
        }
        return obj;
    },
    create(base) {
        return ListProductsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListProductsRequest();
        message.limit = object.limit ?? 0;
        message.offset = object.offset ?? 0;
        return message;
    },
};
function createBaseListProductsResponse() {
    return { products: [] };
}
export const ListProductsResponse = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.products) {
            Product.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListProductsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.products.push(Product.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            products: globalThis.Array.isArray(object?.products) ? object.products.map((e) => Product.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.products?.length) {
            obj.products = message.products.map((e) => Product.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return ListProductsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListProductsResponse();
        message.products = object.products?.map((e) => Product.fromPartial(e)) || [];
        return message;
    },
};
export const ProductServiceService = {
    getProduct: {
        path: "/products.ProductService/GetProduct",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(GetProductRequest.encode(value).finish()),
        requestDeserialize: (value) => GetProductRequest.decode(value),
        responseSerialize: (value) => Buffer.from(GetProductResponse.encode(value).finish()),
        responseDeserialize: (value) => GetProductResponse.decode(value),
    },
    createProduct: {
        path: "/products.ProductService/CreateProduct",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(CreateProductRequest.encode(value).finish()),
        requestDeserialize: (value) => CreateProductRequest.decode(value),
        responseSerialize: (value) => Buffer.from(CreateProductResponse.encode(value).finish()),
        responseDeserialize: (value) => CreateProductResponse.decode(value),
    },
    listProducts: {
        path: "/products.ProductService/ListProducts",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(ListProductsRequest.encode(value).finish()),
        requestDeserialize: (value) => ListProductsRequest.decode(value),
        responseSerialize: (value) => Buffer.from(ListProductsResponse.encode(value).finish()),
        responseDeserialize: (value) => ListProductsResponse.decode(value),
    },
};
export const ProductServiceClient = makeGenericClientConstructor(ProductServiceService, "products.ProductService");
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=product.js.map