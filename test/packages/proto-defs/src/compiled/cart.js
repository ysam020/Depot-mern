// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.8.1
//   protoc               v6.32.1
// source: cart.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { makeGenericClientConstructor, } from "@grpc/grpc-js";
export const protobufPackage = "carts";
function createBaseCart() {
    return { id: 0, title: "", price: 0, image: "", quantity: 0 };
}
export const Cart = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== 0) {
            writer.uint32(8).int32(message.id);
        }
        if (message.title !== "") {
            writer.uint32(18).string(message.title);
        }
        if (message.price !== 0) {
            writer.uint32(24).int32(message.price);
        }
        if (message.image !== "") {
            writer.uint32(34).string(message.image);
        }
        if (message.quantity !== 0) {
            writer.uint32(40).int32(message.quantity);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCart();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.price = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.image = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.quantity = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.Number(object.id) : 0,
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            price: isSet(object.price) ? globalThis.Number(object.price) : 0,
            image: isSet(object.image) ? globalThis.String(object.image) : "",
            quantity: isSet(object.quantity) ? globalThis.Number(object.quantity) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== 0) {
            obj.id = Math.round(message.id);
        }
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.price !== 0) {
            obj.price = Math.round(message.price);
        }
        if (message.image !== "") {
            obj.image = message.image;
        }
        if (message.quantity !== 0) {
            obj.quantity = Math.round(message.quantity);
        }
        return obj;
    },
    create(base) {
        return Cart.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCart();
        message.id = object.id ?? 0;
        message.title = object.title ?? "";
        message.price = object.price ?? 0;
        message.image = object.image ?? "";
        message.quantity = object.quantity ?? 0;
        return message;
    },
};
function createBaseAddToCartRequest() {
    return { id: 0, quantity: 0 };
}
export const AddToCartRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== 0) {
            writer.uint32(8).int32(message.id);
        }
        if (message.quantity !== 0) {
            writer.uint32(16).int32(message.quantity);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddToCartRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.quantity = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.Number(object.id) : 0,
            quantity: isSet(object.quantity) ? globalThis.Number(object.quantity) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== 0) {
            obj.id = Math.round(message.id);
        }
        if (message.quantity !== 0) {
            obj.quantity = Math.round(message.quantity);
        }
        return obj;
    },
    create(base) {
        return AddToCartRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddToCartRequest();
        message.id = object.id ?? 0;
        message.quantity = object.quantity ?? 0;
        return message;
    },
};
function createBaseAddToCartResponse() {
    return {};
}
export const AddToCartResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.cart !== undefined) {
            Cart.encode(message.cart, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddToCartResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.cart = Cart.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { cart: isSet(object.cart) ? Cart.fromJSON(object.cart) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.cart !== undefined) {
            obj.cart = Cart.toJSON(message.cart);
        }
        return obj;
    },
    create(base) {
        return AddToCartResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddToCartResponse();
        message.cart = (object.cart !== undefined && object.cart !== null) ? Cart.fromPartial(object.cart) : undefined;
        return message;
    },
};
function createBaseUpdateCartRequest() {
    return { id: 0, quantity: 0 };
}
export const UpdateCartRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== 0) {
            writer.uint32(8).int32(message.id);
        }
        if (message.quantity !== 0) {
            writer.uint32(16).int32(message.quantity);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateCartRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.quantity = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.Number(object.id) : 0,
            quantity: isSet(object.quantity) ? globalThis.Number(object.quantity) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== 0) {
            obj.id = Math.round(message.id);
        }
        if (message.quantity !== 0) {
            obj.quantity = Math.round(message.quantity);
        }
        return obj;
    },
    create(base) {
        return UpdateCartRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateCartRequest();
        message.id = object.id ?? 0;
        message.quantity = object.quantity ?? 0;
        return message;
    },
};
function createBaseUpdateCartResponse() {
    return { carts: [] };
}
export const UpdateCartResponse = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.carts) {
            Cart.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateCartResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.carts.push(Cart.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { carts: globalThis.Array.isArray(object?.carts) ? object.carts.map((e) => Cart.fromJSON(e)) : [] };
    },
    toJSON(message) {
        const obj = {};
        if (message.carts?.length) {
            obj.carts = message.carts.map((e) => Cart.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return UpdateCartResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateCartResponse();
        message.carts = object.carts?.map((e) => Cart.fromPartial(e)) || [];
        return message;
    },
};
function createBaseDeleteCartRequest() {
    return { id: 0 };
}
export const DeleteCartRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== 0) {
            writer.uint32(8).int32(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeleteCartRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== 0) {
            obj.id = Math.round(message.id);
        }
        return obj;
    },
    create(base) {
        return DeleteCartRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeleteCartRequest();
        message.id = object.id ?? 0;
        return message;
    },
};
function createBaseDeleteCartResponse() {
    return {};
}
export const DeleteCartResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.cart !== undefined) {
            Cart.encode(message.cart, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeleteCartResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.cart = Cart.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { cart: isSet(object.cart) ? Cart.fromJSON(object.cart) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.cart !== undefined) {
            obj.cart = Cart.toJSON(message.cart);
        }
        return obj;
    },
    create(base) {
        return DeleteCartResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeleteCartResponse();
        message.cart = (object.cart !== undefined && object.cart !== null) ? Cart.fromPartial(object.cart) : undefined;
        return message;
    },
};
function createBaseGetCartRequest() {
    return {};
}
export const GetCartRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCartRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return GetCartRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseGetCartRequest();
        return message;
    },
};
function createBaseGetCartResponse() {
    return { carts: [] };
}
export const GetCartResponse = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.carts) {
            Cart.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCartResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.carts.push(Cart.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { carts: globalThis.Array.isArray(object?.carts) ? object.carts.map((e) => Cart.fromJSON(e)) : [] };
    },
    toJSON(message) {
        const obj = {};
        if (message.carts?.length) {
            obj.carts = message.carts.map((e) => Cart.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return GetCartResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetCartResponse();
        message.carts = object.carts?.map((e) => Cart.fromPartial(e)) || [];
        return message;
    },
};
function createBaseClearCartRequest() {
    return {};
}
export const ClearCartRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseClearCartRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return ClearCartRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseClearCartRequest();
        return message;
    },
};
function createBaseClearCartResponse() {
    return { carts: [] };
}
export const ClearCartResponse = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.carts) {
            Cart.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseClearCartResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.carts.push(Cart.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { carts: globalThis.Array.isArray(object?.carts) ? object.carts.map((e) => Cart.fromJSON(e)) : [] };
    },
    toJSON(message) {
        const obj = {};
        if (message.carts?.length) {
            obj.carts = message.carts.map((e) => Cart.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return ClearCartResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseClearCartResponse();
        message.carts = object.carts?.map((e) => Cart.fromPartial(e)) || [];
        return message;
    },
};
export const CartServiceService = {
    addToCart: {
        path: "/carts.CartService/AddToCart",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(AddToCartRequest.encode(value).finish()),
        requestDeserialize: (value) => AddToCartRequest.decode(value),
        responseSerialize: (value) => Buffer.from(AddToCartResponse.encode(value).finish()),
        responseDeserialize: (value) => AddToCartResponse.decode(value),
    },
    updateCart: {
        path: "/carts.CartService/UpdateCart",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(UpdateCartRequest.encode(value).finish()),
        requestDeserialize: (value) => UpdateCartRequest.decode(value),
        responseSerialize: (value) => Buffer.from(UpdateCartResponse.encode(value).finish()),
        responseDeserialize: (value) => UpdateCartResponse.decode(value),
    },
    deleteCart: {
        path: "/carts.CartService/DeleteCart",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(DeleteCartRequest.encode(value).finish()),
        requestDeserialize: (value) => DeleteCartRequest.decode(value),
        responseSerialize: (value) => Buffer.from(DeleteCartResponse.encode(value).finish()),
        responseDeserialize: (value) => DeleteCartResponse.decode(value),
    },
    getCart: {
        path: "/carts.CartService/GetCart",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(GetCartRequest.encode(value).finish()),
        requestDeserialize: (value) => GetCartRequest.decode(value),
        responseSerialize: (value) => Buffer.from(GetCartResponse.encode(value).finish()),
        responseDeserialize: (value) => GetCartResponse.decode(value),
    },
    clearCart: {
        path: "/carts.CartService/ClearCart",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(ClearCartRequest.encode(value).finish()),
        requestDeserialize: (value) => ClearCartRequest.decode(value),
        responseSerialize: (value) => Buffer.from(ClearCartResponse.encode(value).finish()),
        responseDeserialize: (value) => ClearCartResponse.decode(value),
    },
};
export const CartServiceClient = makeGenericClientConstructor(CartServiceService, "carts.CartService");
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=cart.js.map