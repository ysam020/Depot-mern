// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.1
// source: product.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  type Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "products";

/** Product model */
export interface Product {
  id: number;
  title: string;
  price: number;
  shortDescription: string;
  description: string;
  category: string;
  tags: string[];
  sku: string;
  weight: string;
  dimensions: string;
  color: string;
  material: string;
  image: string;
  rating: number;
  qty: number;
}

/** Request to get a product by ID */
export interface GetProductRequest {
  id: number;
}

/** Response containing a product */
export interface GetProductResponse {
  product: Product | undefined;
}

/** Request to create a new product */
export interface CreateProductRequest {
  title: string;
  price: number;
  shortDescription: string;
  description: string;
  category: string;
  tags: string[];
  sku: string;
  weight: string;
  dimensions: string;
  color: string;
  material: string;
  image: string;
  rating: number;
  qty: number;
}

/** Response after creating a product */
export interface CreateProductResponse {
  product: Product | undefined;
}

/** Request to list products */
export interface ListProductsRequest {
  limit: number;
  offset: number;
}

/** Response containing multiple products */
export interface ListProductsResponse {
  products: Product[];
}

function createBaseProduct(): Product {
  return {
    id: 0,
    title: "",
    price: 0,
    shortDescription: "",
    description: "",
    category: "",
    tags: [],
    sku: "",
    weight: "",
    dimensions: "",
    color: "",
    material: "",
    image: "",
    rating: 0,
    qty: 0,
  };
}

export const Product: MessageFns<Product> = {
  encode(message: Product, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.price !== 0) {
      writer.uint32(25).double(message.price);
    }
    if (message.shortDescription !== "") {
      writer.uint32(34).string(message.shortDescription);
    }
    if (message.description !== "") {
      writer.uint32(42).string(message.description);
    }
    if (message.category !== "") {
      writer.uint32(50).string(message.category);
    }
    for (const v of message.tags) {
      writer.uint32(58).string(v!);
    }
    if (message.sku !== "") {
      writer.uint32(66).string(message.sku);
    }
    if (message.weight !== "") {
      writer.uint32(74).string(message.weight);
    }
    if (message.dimensions !== "") {
      writer.uint32(82).string(message.dimensions);
    }
    if (message.color !== "") {
      writer.uint32(90).string(message.color);
    }
    if (message.material !== "") {
      writer.uint32(98).string(message.material);
    }
    if (message.image !== "") {
      writer.uint32(106).string(message.image);
    }
    if (message.rating !== 0) {
      writer.uint32(113).double(message.rating);
    }
    if (message.qty !== 0) {
      writer.uint32(120).int32(message.qty);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Product {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProduct();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.price = reader.double();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.shortDescription = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.category = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.tags.push(reader.string());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.sku = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.weight = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.dimensions = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.color = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.material = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.image = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 113) {
            break;
          }

          message.rating = reader.double();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.qty = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Product {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      price: isSet(object.price) ? globalThis.Number(object.price) : 0,
      shortDescription: isSet(object.shortDescription) ? globalThis.String(object.shortDescription) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      category: isSet(object.category) ? globalThis.String(object.category) : "",
      tags: globalThis.Array.isArray(object?.tags) ? object.tags.map((e: any) => globalThis.String(e)) : [],
      sku: isSet(object.sku) ? globalThis.String(object.sku) : "",
      weight: isSet(object.weight) ? globalThis.String(object.weight) : "",
      dimensions: isSet(object.dimensions) ? globalThis.String(object.dimensions) : "",
      color: isSet(object.color) ? globalThis.String(object.color) : "",
      material: isSet(object.material) ? globalThis.String(object.material) : "",
      image: isSet(object.image) ? globalThis.String(object.image) : "",
      rating: isSet(object.rating) ? globalThis.Number(object.rating) : 0,
      qty: isSet(object.qty) ? globalThis.Number(object.qty) : 0,
    };
  },

  toJSON(message: Product): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.price !== 0) {
      obj.price = message.price;
    }
    if (message.shortDescription !== "") {
      obj.shortDescription = message.shortDescription;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.category !== "") {
      obj.category = message.category;
    }
    if (message.tags?.length) {
      obj.tags = message.tags;
    }
    if (message.sku !== "") {
      obj.sku = message.sku;
    }
    if (message.weight !== "") {
      obj.weight = message.weight;
    }
    if (message.dimensions !== "") {
      obj.dimensions = message.dimensions;
    }
    if (message.color !== "") {
      obj.color = message.color;
    }
    if (message.material !== "") {
      obj.material = message.material;
    }
    if (message.image !== "") {
      obj.image = message.image;
    }
    if (message.rating !== 0) {
      obj.rating = message.rating;
    }
    if (message.qty !== 0) {
      obj.qty = Math.round(message.qty);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Product>, I>>(base?: I): Product {
    return Product.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Product>, I>>(object: I): Product {
    const message = createBaseProduct();
    message.id = object.id ?? 0;
    message.title = object.title ?? "";
    message.price = object.price ?? 0;
    message.shortDescription = object.shortDescription ?? "";
    message.description = object.description ?? "";
    message.category = object.category ?? "";
    message.tags = object.tags?.map((e) => e) || [];
    message.sku = object.sku ?? "";
    message.weight = object.weight ?? "";
    message.dimensions = object.dimensions ?? "";
    message.color = object.color ?? "";
    message.material = object.material ?? "";
    message.image = object.image ?? "";
    message.rating = object.rating ?? 0;
    message.qty = object.qty ?? 0;
    return message;
  },
};

function createBaseGetProductRequest(): GetProductRequest {
  return { id: 0 };
}

export const GetProductRequest: MessageFns<GetProductRequest> = {
  encode(message: GetProductRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetProductRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetProductRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetProductRequest {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: GetProductRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetProductRequest>, I>>(base?: I): GetProductRequest {
    return GetProductRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetProductRequest>, I>>(object: I): GetProductRequest {
    const message = createBaseGetProductRequest();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseGetProductResponse(): GetProductResponse {
  return { product: undefined };
}

export const GetProductResponse: MessageFns<GetProductResponse> = {
  encode(message: GetProductResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.product !== undefined) {
      Product.encode(message.product, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetProductResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetProductResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.product = Product.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetProductResponse {
    return { product: isSet(object.product) ? Product.fromJSON(object.product) : undefined };
  },

  toJSON(message: GetProductResponse): unknown {
    const obj: any = {};
    if (message.product !== undefined) {
      obj.product = Product.toJSON(message.product);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetProductResponse>, I>>(base?: I): GetProductResponse {
    return GetProductResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetProductResponse>, I>>(object: I): GetProductResponse {
    const message = createBaseGetProductResponse();
    message.product = (object.product !== undefined && object.product !== null)
      ? Product.fromPartial(object.product)
      : undefined;
    return message;
  },
};

function createBaseCreateProductRequest(): CreateProductRequest {
  return {
    title: "",
    price: 0,
    shortDescription: "",
    description: "",
    category: "",
    tags: [],
    sku: "",
    weight: "",
    dimensions: "",
    color: "",
    material: "",
    image: "",
    rating: 0,
    qty: 0,
  };
}

export const CreateProductRequest: MessageFns<CreateProductRequest> = {
  encode(message: CreateProductRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.price !== 0) {
      writer.uint32(17).double(message.price);
    }
    if (message.shortDescription !== "") {
      writer.uint32(26).string(message.shortDescription);
    }
    if (message.description !== "") {
      writer.uint32(34).string(message.description);
    }
    if (message.category !== "") {
      writer.uint32(42).string(message.category);
    }
    for (const v of message.tags) {
      writer.uint32(50).string(v!);
    }
    if (message.sku !== "") {
      writer.uint32(58).string(message.sku);
    }
    if (message.weight !== "") {
      writer.uint32(66).string(message.weight);
    }
    if (message.dimensions !== "") {
      writer.uint32(74).string(message.dimensions);
    }
    if (message.color !== "") {
      writer.uint32(82).string(message.color);
    }
    if (message.material !== "") {
      writer.uint32(90).string(message.material);
    }
    if (message.image !== "") {
      writer.uint32(98).string(message.image);
    }
    if (message.rating !== 0) {
      writer.uint32(105).double(message.rating);
    }
    if (message.qty !== 0) {
      writer.uint32(112).int32(message.qty);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateProductRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateProductRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.price = reader.double();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.shortDescription = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.category = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.tags.push(reader.string());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.sku = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.weight = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.dimensions = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.color = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.material = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.image = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 105) {
            break;
          }

          message.rating = reader.double();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.qty = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateProductRequest {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      price: isSet(object.price) ? globalThis.Number(object.price) : 0,
      shortDescription: isSet(object.shortDescription) ? globalThis.String(object.shortDescription) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      category: isSet(object.category) ? globalThis.String(object.category) : "",
      tags: globalThis.Array.isArray(object?.tags) ? object.tags.map((e: any) => globalThis.String(e)) : [],
      sku: isSet(object.sku) ? globalThis.String(object.sku) : "",
      weight: isSet(object.weight) ? globalThis.String(object.weight) : "",
      dimensions: isSet(object.dimensions) ? globalThis.String(object.dimensions) : "",
      color: isSet(object.color) ? globalThis.String(object.color) : "",
      material: isSet(object.material) ? globalThis.String(object.material) : "",
      image: isSet(object.image) ? globalThis.String(object.image) : "",
      rating: isSet(object.rating) ? globalThis.Number(object.rating) : 0,
      qty: isSet(object.qty) ? globalThis.Number(object.qty) : 0,
    };
  },

  toJSON(message: CreateProductRequest): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.price !== 0) {
      obj.price = message.price;
    }
    if (message.shortDescription !== "") {
      obj.shortDescription = message.shortDescription;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.category !== "") {
      obj.category = message.category;
    }
    if (message.tags?.length) {
      obj.tags = message.tags;
    }
    if (message.sku !== "") {
      obj.sku = message.sku;
    }
    if (message.weight !== "") {
      obj.weight = message.weight;
    }
    if (message.dimensions !== "") {
      obj.dimensions = message.dimensions;
    }
    if (message.color !== "") {
      obj.color = message.color;
    }
    if (message.material !== "") {
      obj.material = message.material;
    }
    if (message.image !== "") {
      obj.image = message.image;
    }
    if (message.rating !== 0) {
      obj.rating = message.rating;
    }
    if (message.qty !== 0) {
      obj.qty = Math.round(message.qty);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateProductRequest>, I>>(base?: I): CreateProductRequest {
    return CreateProductRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateProductRequest>, I>>(object: I): CreateProductRequest {
    const message = createBaseCreateProductRequest();
    message.title = object.title ?? "";
    message.price = object.price ?? 0;
    message.shortDescription = object.shortDescription ?? "";
    message.description = object.description ?? "";
    message.category = object.category ?? "";
    message.tags = object.tags?.map((e) => e) || [];
    message.sku = object.sku ?? "";
    message.weight = object.weight ?? "";
    message.dimensions = object.dimensions ?? "";
    message.color = object.color ?? "";
    message.material = object.material ?? "";
    message.image = object.image ?? "";
    message.rating = object.rating ?? 0;
    message.qty = object.qty ?? 0;
    return message;
  },
};

function createBaseCreateProductResponse(): CreateProductResponse {
  return { product: undefined };
}

export const CreateProductResponse: MessageFns<CreateProductResponse> = {
  encode(message: CreateProductResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.product !== undefined) {
      Product.encode(message.product, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateProductResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateProductResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.product = Product.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateProductResponse {
    return { product: isSet(object.product) ? Product.fromJSON(object.product) : undefined };
  },

  toJSON(message: CreateProductResponse): unknown {
    const obj: any = {};
    if (message.product !== undefined) {
      obj.product = Product.toJSON(message.product);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateProductResponse>, I>>(base?: I): CreateProductResponse {
    return CreateProductResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateProductResponse>, I>>(object: I): CreateProductResponse {
    const message = createBaseCreateProductResponse();
    message.product = (object.product !== undefined && object.product !== null)
      ? Product.fromPartial(object.product)
      : undefined;
    return message;
  },
};

function createBaseListProductsRequest(): ListProductsRequest {
  return { limit: 0, offset: 0 };
}

export const ListProductsRequest: MessageFns<ListProductsRequest> = {
  encode(message: ListProductsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.limit !== 0) {
      writer.uint32(8).int32(message.limit);
    }
    if (message.offset !== 0) {
      writer.uint32(16).int32(message.offset);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListProductsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProductsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.limit = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.offset = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListProductsRequest {
    return {
      limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
      offset: isSet(object.offset) ? globalThis.Number(object.offset) : 0,
    };
  },

  toJSON(message: ListProductsRequest): unknown {
    const obj: any = {};
    if (message.limit !== 0) {
      obj.limit = Math.round(message.limit);
    }
    if (message.offset !== 0) {
      obj.offset = Math.round(message.offset);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListProductsRequest>, I>>(base?: I): ListProductsRequest {
    return ListProductsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListProductsRequest>, I>>(object: I): ListProductsRequest {
    const message = createBaseListProductsRequest();
    message.limit = object.limit ?? 0;
    message.offset = object.offset ?? 0;
    return message;
  },
};

function createBaseListProductsResponse(): ListProductsResponse {
  return { products: [] };
}

export const ListProductsResponse: MessageFns<ListProductsResponse> = {
  encode(message: ListProductsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.products) {
      Product.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListProductsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProductsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.products.push(Product.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListProductsResponse {
    return {
      products: globalThis.Array.isArray(object?.products) ? object.products.map((e: any) => Product.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListProductsResponse): unknown {
    const obj: any = {};
    if (message.products?.length) {
      obj.products = message.products.map((e) => Product.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListProductsResponse>, I>>(base?: I): ListProductsResponse {
    return ListProductsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListProductsResponse>, I>>(object: I): ListProductsResponse {
    const message = createBaseListProductsResponse();
    message.products = object.products?.map((e) => Product.fromPartial(e)) || [];
    return message;
  },
};

/** Product Service definition */
export type ProductServiceService = typeof ProductServiceService;
export const ProductServiceService = {
  getProduct: {
    path: "/products.ProductService/GetProduct",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetProductRequest): Buffer => Buffer.from(GetProductRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetProductRequest => GetProductRequest.decode(value),
    responseSerialize: (value: GetProductResponse): Buffer => Buffer.from(GetProductResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetProductResponse => GetProductResponse.decode(value),
  },
  createProduct: {
    path: "/products.ProductService/CreateProduct",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateProductRequest): Buffer => Buffer.from(CreateProductRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): CreateProductRequest => CreateProductRequest.decode(value),
    responseSerialize: (value: CreateProductResponse): Buffer =>
      Buffer.from(CreateProductResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): CreateProductResponse => CreateProductResponse.decode(value),
  },
  listProducts: {
    path: "/products.ProductService/ListProducts",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListProductsRequest): Buffer => Buffer.from(ListProductsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): ListProductsRequest => ListProductsRequest.decode(value),
    responseSerialize: (value: ListProductsResponse): Buffer =>
      Buffer.from(ListProductsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): ListProductsResponse => ListProductsResponse.decode(value),
  },
} as const;

export interface ProductServiceServer extends UntypedServiceImplementation {
  getProduct: handleUnaryCall<GetProductRequest, GetProductResponse>;
  createProduct: handleUnaryCall<CreateProductRequest, CreateProductResponse>;
  listProducts: handleUnaryCall<ListProductsRequest, ListProductsResponse>;
}

export interface ProductServiceClient extends Client {
  getProduct(
    request: GetProductRequest,
    callback: (error: ServiceError | null, response: GetProductResponse) => void,
  ): ClientUnaryCall;
  getProduct(
    request: GetProductRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetProductResponse) => void,
  ): ClientUnaryCall;
  getProduct(
    request: GetProductRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetProductResponse) => void,
  ): ClientUnaryCall;
  createProduct(
    request: CreateProductRequest,
    callback: (error: ServiceError | null, response: CreateProductResponse) => void,
  ): ClientUnaryCall;
  createProduct(
    request: CreateProductRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CreateProductResponse) => void,
  ): ClientUnaryCall;
  createProduct(
    request: CreateProductRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CreateProductResponse) => void,
  ): ClientUnaryCall;
  listProducts(
    request: ListProductsRequest,
    callback: (error: ServiceError | null, response: ListProductsResponse) => void,
  ): ClientUnaryCall;
  listProducts(
    request: ListProductsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListProductsResponse) => void,
  ): ClientUnaryCall;
  listProducts(
    request: ListProductsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListProductsResponse) => void,
  ): ClientUnaryCall;
}

export const ProductServiceClient = makeGenericClientConstructor(
  ProductServiceService,
  "products.ProductService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): ProductServiceClient;
  service: typeof ProductServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
