// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.1
// source: cart.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  type Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "carts";

export interface Cart {
  id: number;
  title: string;
  price: number;
  image: string;
  quantity: number;
}

export interface AddToCartRequest {
  id: number;
  quantity: number;
}

export interface AddToCartResponse {
  cart: Cart | undefined;
}

export interface UpdateCartRequest {
  id: number;
  quantity: number;
}

export interface UpdateCartResponse {
  carts: Cart[];
}

export interface DeleteCartRequest {
  id: number;
}

export interface DeleteCartResponse {
  cart: Cart | undefined;
}

export interface GetCartRequest {
}

export interface GetCartResponse {
  carts: Cart[];
}

function createBaseCart(): Cart {
  return { id: 0, title: "", price: 0, image: "", quantity: 0 };
}

export const Cart: MessageFns<Cart> = {
  encode(message: Cart, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.price !== 0) {
      writer.uint32(24).int32(message.price);
    }
    if (message.image !== "") {
      writer.uint32(34).string(message.image);
    }
    if (message.quantity !== 0) {
      writer.uint32(40).int32(message.quantity);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Cart {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCart();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.price = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.image = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.quantity = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Cart {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      price: isSet(object.price) ? globalThis.Number(object.price) : 0,
      image: isSet(object.image) ? globalThis.String(object.image) : "",
      quantity: isSet(object.quantity) ? globalThis.Number(object.quantity) : 0,
    };
  },

  toJSON(message: Cart): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.price !== 0) {
      obj.price = Math.round(message.price);
    }
    if (message.image !== "") {
      obj.image = message.image;
    }
    if (message.quantity !== 0) {
      obj.quantity = Math.round(message.quantity);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Cart>, I>>(base?: I): Cart {
    return Cart.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Cart>, I>>(object: I): Cart {
    const message = createBaseCart();
    message.id = object.id ?? 0;
    message.title = object.title ?? "";
    message.price = object.price ?? 0;
    message.image = object.image ?? "";
    message.quantity = object.quantity ?? 0;
    return message;
  },
};

function createBaseAddToCartRequest(): AddToCartRequest {
  return { id: 0, quantity: 0 };
}

export const AddToCartRequest: MessageFns<AddToCartRequest> = {
  encode(message: AddToCartRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.quantity !== 0) {
      writer.uint32(16).int32(message.quantity);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddToCartRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddToCartRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.quantity = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddToCartRequest {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      quantity: isSet(object.quantity) ? globalThis.Number(object.quantity) : 0,
    };
  },

  toJSON(message: AddToCartRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.quantity !== 0) {
      obj.quantity = Math.round(message.quantity);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddToCartRequest>, I>>(base?: I): AddToCartRequest {
    return AddToCartRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddToCartRequest>, I>>(object: I): AddToCartRequest {
    const message = createBaseAddToCartRequest();
    message.id = object.id ?? 0;
    message.quantity = object.quantity ?? 0;
    return message;
  },
};

function createBaseAddToCartResponse(): AddToCartResponse {
  return { cart: undefined };
}

export const AddToCartResponse: MessageFns<AddToCartResponse> = {
  encode(message: AddToCartResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cart !== undefined) {
      Cart.encode(message.cart, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddToCartResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddToCartResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.cart = Cart.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddToCartResponse {
    return { cart: isSet(object.cart) ? Cart.fromJSON(object.cart) : undefined };
  },

  toJSON(message: AddToCartResponse): unknown {
    const obj: any = {};
    if (message.cart !== undefined) {
      obj.cart = Cart.toJSON(message.cart);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddToCartResponse>, I>>(base?: I): AddToCartResponse {
    return AddToCartResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddToCartResponse>, I>>(object: I): AddToCartResponse {
    const message = createBaseAddToCartResponse();
    message.cart = (object.cart !== undefined && object.cart !== null) ? Cart.fromPartial(object.cart) : undefined;
    return message;
  },
};

function createBaseUpdateCartRequest(): UpdateCartRequest {
  return { id: 0, quantity: 0 };
}

export const UpdateCartRequest: MessageFns<UpdateCartRequest> = {
  encode(message: UpdateCartRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.quantity !== 0) {
      writer.uint32(16).int32(message.quantity);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateCartRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCartRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.quantity = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateCartRequest {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      quantity: isSet(object.quantity) ? globalThis.Number(object.quantity) : 0,
    };
  },

  toJSON(message: UpdateCartRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.quantity !== 0) {
      obj.quantity = Math.round(message.quantity);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateCartRequest>, I>>(base?: I): UpdateCartRequest {
    return UpdateCartRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateCartRequest>, I>>(object: I): UpdateCartRequest {
    const message = createBaseUpdateCartRequest();
    message.id = object.id ?? 0;
    message.quantity = object.quantity ?? 0;
    return message;
  },
};

function createBaseUpdateCartResponse(): UpdateCartResponse {
  return { carts: [] };
}

export const UpdateCartResponse: MessageFns<UpdateCartResponse> = {
  encode(message: UpdateCartResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.carts) {
      Cart.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateCartResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCartResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.carts.push(Cart.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateCartResponse {
    return { carts: globalThis.Array.isArray(object?.carts) ? object.carts.map((e: any) => Cart.fromJSON(e)) : [] };
  },

  toJSON(message: UpdateCartResponse): unknown {
    const obj: any = {};
    if (message.carts?.length) {
      obj.carts = message.carts.map((e) => Cart.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateCartResponse>, I>>(base?: I): UpdateCartResponse {
    return UpdateCartResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateCartResponse>, I>>(object: I): UpdateCartResponse {
    const message = createBaseUpdateCartResponse();
    message.carts = object.carts?.map((e) => Cart.fromPartial(e)) || [];
    return message;
  },
};

function createBaseDeleteCartRequest(): DeleteCartRequest {
  return { id: 0 };
}

export const DeleteCartRequest: MessageFns<DeleteCartRequest> = {
  encode(message: DeleteCartRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteCartRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteCartRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteCartRequest {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: DeleteCartRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteCartRequest>, I>>(base?: I): DeleteCartRequest {
    return DeleteCartRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteCartRequest>, I>>(object: I): DeleteCartRequest {
    const message = createBaseDeleteCartRequest();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseDeleteCartResponse(): DeleteCartResponse {
  return { cart: undefined };
}

export const DeleteCartResponse: MessageFns<DeleteCartResponse> = {
  encode(message: DeleteCartResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cart !== undefined) {
      Cart.encode(message.cart, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteCartResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteCartResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.cart = Cart.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteCartResponse {
    return { cart: isSet(object.cart) ? Cart.fromJSON(object.cart) : undefined };
  },

  toJSON(message: DeleteCartResponse): unknown {
    const obj: any = {};
    if (message.cart !== undefined) {
      obj.cart = Cart.toJSON(message.cart);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteCartResponse>, I>>(base?: I): DeleteCartResponse {
    return DeleteCartResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteCartResponse>, I>>(object: I): DeleteCartResponse {
    const message = createBaseDeleteCartResponse();
    message.cart = (object.cart !== undefined && object.cart !== null) ? Cart.fromPartial(object.cart) : undefined;
    return message;
  },
};

function createBaseGetCartRequest(): GetCartRequest {
  return {};
}

export const GetCartRequest: MessageFns<GetCartRequest> = {
  encode(_: GetCartRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCartRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCartRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetCartRequest {
    return {};
  },

  toJSON(_: GetCartRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCartRequest>, I>>(base?: I): GetCartRequest {
    return GetCartRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCartRequest>, I>>(_: I): GetCartRequest {
    const message = createBaseGetCartRequest();
    return message;
  },
};

function createBaseGetCartResponse(): GetCartResponse {
  return { carts: [] };
}

export const GetCartResponse: MessageFns<GetCartResponse> = {
  encode(message: GetCartResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.carts) {
      Cart.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCartResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCartResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.carts.push(Cart.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCartResponse {
    return { carts: globalThis.Array.isArray(object?.carts) ? object.carts.map((e: any) => Cart.fromJSON(e)) : [] };
  },

  toJSON(message: GetCartResponse): unknown {
    const obj: any = {};
    if (message.carts?.length) {
      obj.carts = message.carts.map((e) => Cart.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCartResponse>, I>>(base?: I): GetCartResponse {
    return GetCartResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCartResponse>, I>>(object: I): GetCartResponse {
    const message = createBaseGetCartResponse();
    message.carts = object.carts?.map((e) => Cart.fromPartial(e)) || [];
    return message;
  },
};

export type CartServiceService = typeof CartServiceService;
export const CartServiceService = {
  addToCart: {
    path: "/carts.CartService/AddToCart",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: AddToCartRequest): Buffer => Buffer.from(AddToCartRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): AddToCartRequest => AddToCartRequest.decode(value),
    responseSerialize: (value: AddToCartResponse): Buffer => Buffer.from(AddToCartResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): AddToCartResponse => AddToCartResponse.decode(value),
  },
  updateCart: {
    path: "/carts.CartService/UpdateCart",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateCartRequest): Buffer => Buffer.from(UpdateCartRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): UpdateCartRequest => UpdateCartRequest.decode(value),
    responseSerialize: (value: UpdateCartResponse): Buffer => Buffer.from(UpdateCartResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): UpdateCartResponse => UpdateCartResponse.decode(value),
  },
  deleteCart: {
    path: "/carts.CartService/DeleteCart",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DeleteCartRequest): Buffer => Buffer.from(DeleteCartRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): DeleteCartRequest => DeleteCartRequest.decode(value),
    responseSerialize: (value: DeleteCartResponse): Buffer => Buffer.from(DeleteCartResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): DeleteCartResponse => DeleteCartResponse.decode(value),
  },
  getCart: {
    path: "/carts.CartService/GetCart",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetCartRequest): Buffer => Buffer.from(GetCartRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetCartRequest => GetCartRequest.decode(value),
    responseSerialize: (value: GetCartResponse): Buffer => Buffer.from(GetCartResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetCartResponse => GetCartResponse.decode(value),
  },
} as const;

export interface CartServiceServer extends UntypedServiceImplementation {
  addToCart: handleUnaryCall<AddToCartRequest, AddToCartResponse>;
  updateCart: handleUnaryCall<UpdateCartRequest, UpdateCartResponse>;
  deleteCart: handleUnaryCall<DeleteCartRequest, DeleteCartResponse>;
  getCart: handleUnaryCall<GetCartRequest, GetCartResponse>;
}

export interface CartServiceClient extends Client {
  addToCart(
    request: AddToCartRequest,
    callback: (error: ServiceError | null, response: AddToCartResponse) => void,
  ): ClientUnaryCall;
  addToCart(
    request: AddToCartRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: AddToCartResponse) => void,
  ): ClientUnaryCall;
  addToCart(
    request: AddToCartRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: AddToCartResponse) => void,
  ): ClientUnaryCall;
  updateCart(
    request: UpdateCartRequest,
    callback: (error: ServiceError | null, response: UpdateCartResponse) => void,
  ): ClientUnaryCall;
  updateCart(
    request: UpdateCartRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UpdateCartResponse) => void,
  ): ClientUnaryCall;
  updateCart(
    request: UpdateCartRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UpdateCartResponse) => void,
  ): ClientUnaryCall;
  deleteCart(
    request: DeleteCartRequest,
    callback: (error: ServiceError | null, response: DeleteCartResponse) => void,
  ): ClientUnaryCall;
  deleteCart(
    request: DeleteCartRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: DeleteCartResponse) => void,
  ): ClientUnaryCall;
  deleteCart(
    request: DeleteCartRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: DeleteCartResponse) => void,
  ): ClientUnaryCall;
  getCart(
    request: GetCartRequest,
    callback: (error: ServiceError | null, response: GetCartResponse) => void,
  ): ClientUnaryCall;
  getCart(
    request: GetCartRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetCartResponse) => void,
  ): ClientUnaryCall;
  getCart(
    request: GetCartRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetCartResponse) => void,
  ): ClientUnaryCall;
}

export const CartServiceClient = makeGenericClientConstructor(CartServiceService, "carts.CartService") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): CartServiceClient;
  service: typeof CartServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
