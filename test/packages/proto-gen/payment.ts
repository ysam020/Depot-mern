// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.1
// source: payment.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  type Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "payments";

/** Payment model */
export interface Payment {
  id: string;
  orderId: number;
  razorpayOrderId: string;
  razorpayPaymentId: string;
  razorpaySignature: string;
  amount: number;
  currency: string;
  status: string;
  paymentMethod: string;
  userId: number;
}

/** Request to create a Razorpay order */
export interface CreateOrderRequest {
  amount: number;
  currency: string;
  receipt: string;
}

/** Response containing Razorpay order details */
export interface CreateOrderResponse {
  razorpayOrderId: string;
  amount: number;
  currency: string;
  keyId: string;
}

/** Cart item for order creation */
export interface CartItem {
  id: number;
  title: string;
  price: number;
  image: string;
  quantity: number;
}

/** Shipping address */
export interface ShippingAddress {
  firstName: string;
  lastName: string;
  address: string;
  city: string;
  state: string;
  pincode: string;
  phone: string;
}

/** Request to verify payment */
export interface VerifyPaymentRequest {
  razorpayOrderId: string;
  razorpayPaymentId: string;
  razorpaySignature: string;
  amount: number;
  userId: number;
  cartItems: CartItem[];
  shippingAddress: ShippingAddress | undefined;
}

/** Response after payment verification */
export interface VerifyPaymentResponse {
  success: boolean;
  message: string;
  payment: Payment | undefined;
}

function createBasePayment(): Payment {
  return {
    id: "",
    orderId: 0,
    razorpayOrderId: "",
    razorpayPaymentId: "",
    razorpaySignature: "",
    amount: 0,
    currency: "",
    status: "",
    paymentMethod: "",
    userId: 0,
  };
}

export const Payment: MessageFns<Payment> = {
  encode(message: Payment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.orderId !== 0) {
      writer.uint32(16).int32(message.orderId);
    }
    if (message.razorpayOrderId !== "") {
      writer.uint32(26).string(message.razorpayOrderId);
    }
    if (message.razorpayPaymentId !== "") {
      writer.uint32(34).string(message.razorpayPaymentId);
    }
    if (message.razorpaySignature !== "") {
      writer.uint32(42).string(message.razorpaySignature);
    }
    if (message.amount !== 0) {
      writer.uint32(48).int32(message.amount);
    }
    if (message.currency !== "") {
      writer.uint32(58).string(message.currency);
    }
    if (message.status !== "") {
      writer.uint32(66).string(message.status);
    }
    if (message.paymentMethod !== "") {
      writer.uint32(74).string(message.paymentMethod);
    }
    if (message.userId !== 0) {
      writer.uint32(80).int32(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Payment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePayment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.orderId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.razorpayOrderId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.razorpayPaymentId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.razorpaySignature = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.amount = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.currency = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.paymentMethod = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Payment {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      orderId: isSet(object.orderId) ? globalThis.Number(object.orderId) : 0,
      razorpayOrderId: isSet(object.razorpayOrderId) ? globalThis.String(object.razorpayOrderId) : "",
      razorpayPaymentId: isSet(object.razorpayPaymentId) ? globalThis.String(object.razorpayPaymentId) : "",
      razorpaySignature: isSet(object.razorpaySignature) ? globalThis.String(object.razorpaySignature) : "",
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
      currency: isSet(object.currency) ? globalThis.String(object.currency) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      paymentMethod: isSet(object.paymentMethod) ? globalThis.String(object.paymentMethod) : "",
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
    };
  },

  toJSON(message: Payment): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.orderId !== 0) {
      obj.orderId = Math.round(message.orderId);
    }
    if (message.razorpayOrderId !== "") {
      obj.razorpayOrderId = message.razorpayOrderId;
    }
    if (message.razorpayPaymentId !== "") {
      obj.razorpayPaymentId = message.razorpayPaymentId;
    }
    if (message.razorpaySignature !== "") {
      obj.razorpaySignature = message.razorpaySignature;
    }
    if (message.amount !== 0) {
      obj.amount = Math.round(message.amount);
    }
    if (message.currency !== "") {
      obj.currency = message.currency;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.paymentMethod !== "") {
      obj.paymentMethod = message.paymentMethod;
    }
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Payment>, I>>(base?: I): Payment {
    return Payment.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Payment>, I>>(object: I): Payment {
    const message = createBasePayment();
    message.id = object.id ?? "";
    message.orderId = object.orderId ?? 0;
    message.razorpayOrderId = object.razorpayOrderId ?? "";
    message.razorpayPaymentId = object.razorpayPaymentId ?? "";
    message.razorpaySignature = object.razorpaySignature ?? "";
    message.amount = object.amount ?? 0;
    message.currency = object.currency ?? "";
    message.status = object.status ?? "";
    message.paymentMethod = object.paymentMethod ?? "";
    message.userId = object.userId ?? 0;
    return message;
  },
};

function createBaseCreateOrderRequest(): CreateOrderRequest {
  return { amount: 0, currency: "", receipt: "" };
}

export const CreateOrderRequest: MessageFns<CreateOrderRequest> = {
  encode(message: CreateOrderRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.amount !== 0) {
      writer.uint32(8).int32(message.amount);
    }
    if (message.currency !== "") {
      writer.uint32(18).string(message.currency);
    }
    if (message.receipt !== "") {
      writer.uint32(26).string(message.receipt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateOrderRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateOrderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.amount = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.currency = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.receipt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateOrderRequest {
    return {
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
      currency: isSet(object.currency) ? globalThis.String(object.currency) : "",
      receipt: isSet(object.receipt) ? globalThis.String(object.receipt) : "",
    };
  },

  toJSON(message: CreateOrderRequest): unknown {
    const obj: any = {};
    if (message.amount !== 0) {
      obj.amount = Math.round(message.amount);
    }
    if (message.currency !== "") {
      obj.currency = message.currency;
    }
    if (message.receipt !== "") {
      obj.receipt = message.receipt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateOrderRequest>, I>>(base?: I): CreateOrderRequest {
    return CreateOrderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateOrderRequest>, I>>(object: I): CreateOrderRequest {
    const message = createBaseCreateOrderRequest();
    message.amount = object.amount ?? 0;
    message.currency = object.currency ?? "";
    message.receipt = object.receipt ?? "";
    return message;
  },
};

function createBaseCreateOrderResponse(): CreateOrderResponse {
  return { razorpayOrderId: "", amount: 0, currency: "", keyId: "" };
}

export const CreateOrderResponse: MessageFns<CreateOrderResponse> = {
  encode(message: CreateOrderResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.razorpayOrderId !== "") {
      writer.uint32(10).string(message.razorpayOrderId);
    }
    if (message.amount !== 0) {
      writer.uint32(16).int32(message.amount);
    }
    if (message.currency !== "") {
      writer.uint32(26).string(message.currency);
    }
    if (message.keyId !== "") {
      writer.uint32(34).string(message.keyId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateOrderResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateOrderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.razorpayOrderId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.amount = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.currency = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.keyId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateOrderResponse {
    return {
      razorpayOrderId: isSet(object.razorpayOrderId) ? globalThis.String(object.razorpayOrderId) : "",
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
      currency: isSet(object.currency) ? globalThis.String(object.currency) : "",
      keyId: isSet(object.keyId) ? globalThis.String(object.keyId) : "",
    };
  },

  toJSON(message: CreateOrderResponse): unknown {
    const obj: any = {};
    if (message.razorpayOrderId !== "") {
      obj.razorpayOrderId = message.razorpayOrderId;
    }
    if (message.amount !== 0) {
      obj.amount = Math.round(message.amount);
    }
    if (message.currency !== "") {
      obj.currency = message.currency;
    }
    if (message.keyId !== "") {
      obj.keyId = message.keyId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateOrderResponse>, I>>(base?: I): CreateOrderResponse {
    return CreateOrderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateOrderResponse>, I>>(object: I): CreateOrderResponse {
    const message = createBaseCreateOrderResponse();
    message.razorpayOrderId = object.razorpayOrderId ?? "";
    message.amount = object.amount ?? 0;
    message.currency = object.currency ?? "";
    message.keyId = object.keyId ?? "";
    return message;
  },
};

function createBaseCartItem(): CartItem {
  return { id: 0, title: "", price: 0, image: "", quantity: 0 };
}

export const CartItem: MessageFns<CartItem> = {
  encode(message: CartItem, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.price !== 0) {
      writer.uint32(24).int32(message.price);
    }
    if (message.image !== "") {
      writer.uint32(34).string(message.image);
    }
    if (message.quantity !== 0) {
      writer.uint32(40).int32(message.quantity);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CartItem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCartItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.price = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.image = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.quantity = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CartItem {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      price: isSet(object.price) ? globalThis.Number(object.price) : 0,
      image: isSet(object.image) ? globalThis.String(object.image) : "",
      quantity: isSet(object.quantity) ? globalThis.Number(object.quantity) : 0,
    };
  },

  toJSON(message: CartItem): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.price !== 0) {
      obj.price = Math.round(message.price);
    }
    if (message.image !== "") {
      obj.image = message.image;
    }
    if (message.quantity !== 0) {
      obj.quantity = Math.round(message.quantity);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CartItem>, I>>(base?: I): CartItem {
    return CartItem.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CartItem>, I>>(object: I): CartItem {
    const message = createBaseCartItem();
    message.id = object.id ?? 0;
    message.title = object.title ?? "";
    message.price = object.price ?? 0;
    message.image = object.image ?? "";
    message.quantity = object.quantity ?? 0;
    return message;
  },
};

function createBaseShippingAddress(): ShippingAddress {
  return { firstName: "", lastName: "", address: "", city: "", state: "", pincode: "", phone: "" };
}

export const ShippingAddress: MessageFns<ShippingAddress> = {
  encode(message: ShippingAddress, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.firstName !== "") {
      writer.uint32(10).string(message.firstName);
    }
    if (message.lastName !== "") {
      writer.uint32(18).string(message.lastName);
    }
    if (message.address !== "") {
      writer.uint32(26).string(message.address);
    }
    if (message.city !== "") {
      writer.uint32(34).string(message.city);
    }
    if (message.state !== "") {
      writer.uint32(42).string(message.state);
    }
    if (message.pincode !== "") {
      writer.uint32(50).string(message.pincode);
    }
    if (message.phone !== "") {
      writer.uint32(58).string(message.phone);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ShippingAddress {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseShippingAddress();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.firstName = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.lastName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.address = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.city = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.state = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.pincode = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.phone = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ShippingAddress {
    return {
      firstName: isSet(object.firstName) ? globalThis.String(object.firstName) : "",
      lastName: isSet(object.lastName) ? globalThis.String(object.lastName) : "",
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      city: isSet(object.city) ? globalThis.String(object.city) : "",
      state: isSet(object.state) ? globalThis.String(object.state) : "",
      pincode: isSet(object.pincode) ? globalThis.String(object.pincode) : "",
      phone: isSet(object.phone) ? globalThis.String(object.phone) : "",
    };
  },

  toJSON(message: ShippingAddress): unknown {
    const obj: any = {};
    if (message.firstName !== "") {
      obj.firstName = message.firstName;
    }
    if (message.lastName !== "") {
      obj.lastName = message.lastName;
    }
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.city !== "") {
      obj.city = message.city;
    }
    if (message.state !== "") {
      obj.state = message.state;
    }
    if (message.pincode !== "") {
      obj.pincode = message.pincode;
    }
    if (message.phone !== "") {
      obj.phone = message.phone;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ShippingAddress>, I>>(base?: I): ShippingAddress {
    return ShippingAddress.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ShippingAddress>, I>>(object: I): ShippingAddress {
    const message = createBaseShippingAddress();
    message.firstName = object.firstName ?? "";
    message.lastName = object.lastName ?? "";
    message.address = object.address ?? "";
    message.city = object.city ?? "";
    message.state = object.state ?? "";
    message.pincode = object.pincode ?? "";
    message.phone = object.phone ?? "";
    return message;
  },
};

function createBaseVerifyPaymentRequest(): VerifyPaymentRequest {
  return {
    razorpayOrderId: "",
    razorpayPaymentId: "",
    razorpaySignature: "",
    amount: 0,
    userId: 0,
    cartItems: [],
    shippingAddress: undefined,
  };
}

export const VerifyPaymentRequest: MessageFns<VerifyPaymentRequest> = {
  encode(message: VerifyPaymentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.razorpayOrderId !== "") {
      writer.uint32(10).string(message.razorpayOrderId);
    }
    if (message.razorpayPaymentId !== "") {
      writer.uint32(18).string(message.razorpayPaymentId);
    }
    if (message.razorpaySignature !== "") {
      writer.uint32(26).string(message.razorpaySignature);
    }
    if (message.amount !== 0) {
      writer.uint32(32).int32(message.amount);
    }
    if (message.userId !== 0) {
      writer.uint32(40).int32(message.userId);
    }
    for (const v of message.cartItems) {
      CartItem.encode(v!, writer.uint32(50).fork()).join();
    }
    if (message.shippingAddress !== undefined) {
      ShippingAddress.encode(message.shippingAddress, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VerifyPaymentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVerifyPaymentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.razorpayOrderId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.razorpayPaymentId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.razorpaySignature = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.amount = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.cartItems.push(CartItem.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.shippingAddress = ShippingAddress.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VerifyPaymentRequest {
    return {
      razorpayOrderId: isSet(object.razorpayOrderId) ? globalThis.String(object.razorpayOrderId) : "",
      razorpayPaymentId: isSet(object.razorpayPaymentId) ? globalThis.String(object.razorpayPaymentId) : "",
      razorpaySignature: isSet(object.razorpaySignature) ? globalThis.String(object.razorpaySignature) : "",
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      cartItems: globalThis.Array.isArray(object?.cartItems)
        ? object.cartItems.map((e: any) => CartItem.fromJSON(e))
        : [],
      shippingAddress: isSet(object.shippingAddress) ? ShippingAddress.fromJSON(object.shippingAddress) : undefined,
    };
  },

  toJSON(message: VerifyPaymentRequest): unknown {
    const obj: any = {};
    if (message.razorpayOrderId !== "") {
      obj.razorpayOrderId = message.razorpayOrderId;
    }
    if (message.razorpayPaymentId !== "") {
      obj.razorpayPaymentId = message.razorpayPaymentId;
    }
    if (message.razorpaySignature !== "") {
      obj.razorpaySignature = message.razorpaySignature;
    }
    if (message.amount !== 0) {
      obj.amount = Math.round(message.amount);
    }
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.cartItems?.length) {
      obj.cartItems = message.cartItems.map((e) => CartItem.toJSON(e));
    }
    if (message.shippingAddress !== undefined) {
      obj.shippingAddress = ShippingAddress.toJSON(message.shippingAddress);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VerifyPaymentRequest>, I>>(base?: I): VerifyPaymentRequest {
    return VerifyPaymentRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VerifyPaymentRequest>, I>>(object: I): VerifyPaymentRequest {
    const message = createBaseVerifyPaymentRequest();
    message.razorpayOrderId = object.razorpayOrderId ?? "";
    message.razorpayPaymentId = object.razorpayPaymentId ?? "";
    message.razorpaySignature = object.razorpaySignature ?? "";
    message.amount = object.amount ?? 0;
    message.userId = object.userId ?? 0;
    message.cartItems = object.cartItems?.map((e) => CartItem.fromPartial(e)) || [];
    message.shippingAddress = (object.shippingAddress !== undefined && object.shippingAddress !== null)
      ? ShippingAddress.fromPartial(object.shippingAddress)
      : undefined;
    return message;
  },
};

function createBaseVerifyPaymentResponse(): VerifyPaymentResponse {
  return { success: false, message: "", payment: undefined };
}

export const VerifyPaymentResponse: MessageFns<VerifyPaymentResponse> = {
  encode(message: VerifyPaymentResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    if (message.payment !== undefined) {
      Payment.encode(message.payment, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VerifyPaymentResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVerifyPaymentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.payment = Payment.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VerifyPaymentResponse {
    return {
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      payment: isSet(object.payment) ? Payment.fromJSON(object.payment) : undefined,
    };
  },

  toJSON(message: VerifyPaymentResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.payment !== undefined) {
      obj.payment = Payment.toJSON(message.payment);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VerifyPaymentResponse>, I>>(base?: I): VerifyPaymentResponse {
    return VerifyPaymentResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VerifyPaymentResponse>, I>>(object: I): VerifyPaymentResponse {
    const message = createBaseVerifyPaymentResponse();
    message.success = object.success ?? false;
    message.message = object.message ?? "";
    message.payment = (object.payment !== undefined && object.payment !== null)
      ? Payment.fromPartial(object.payment)
      : undefined;
    return message;
  },
};

/** Payment Service definition */
export type PaymentServiceService = typeof PaymentServiceService;
export const PaymentServiceService = {
  createOrder: {
    path: "/payments.PaymentService/CreateOrder",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateOrderRequest): Buffer => Buffer.from(CreateOrderRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): CreateOrderRequest => CreateOrderRequest.decode(value),
    responseSerialize: (value: CreateOrderResponse): Buffer => Buffer.from(CreateOrderResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): CreateOrderResponse => CreateOrderResponse.decode(value),
  },
  verifyPayment: {
    path: "/payments.PaymentService/VerifyPayment",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: VerifyPaymentRequest): Buffer => Buffer.from(VerifyPaymentRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): VerifyPaymentRequest => VerifyPaymentRequest.decode(value),
    responseSerialize: (value: VerifyPaymentResponse): Buffer =>
      Buffer.from(VerifyPaymentResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): VerifyPaymentResponse => VerifyPaymentResponse.decode(value),
  },
} as const;

export interface PaymentServiceServer extends UntypedServiceImplementation {
  createOrder: handleUnaryCall<CreateOrderRequest, CreateOrderResponse>;
  verifyPayment: handleUnaryCall<VerifyPaymentRequest, VerifyPaymentResponse>;
}

export interface PaymentServiceClient extends Client {
  createOrder(
    request: CreateOrderRequest,
    callback: (error: ServiceError | null, response: CreateOrderResponse) => void,
  ): ClientUnaryCall;
  createOrder(
    request: CreateOrderRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CreateOrderResponse) => void,
  ): ClientUnaryCall;
  createOrder(
    request: CreateOrderRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CreateOrderResponse) => void,
  ): ClientUnaryCall;
  verifyPayment(
    request: VerifyPaymentRequest,
    callback: (error: ServiceError | null, response: VerifyPaymentResponse) => void,
  ): ClientUnaryCall;
  verifyPayment(
    request: VerifyPaymentRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: VerifyPaymentResponse) => void,
  ): ClientUnaryCall;
  verifyPayment(
    request: VerifyPaymentRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: VerifyPaymentResponse) => void,
  ): ClientUnaryCall;
}

export const PaymentServiceClient = makeGenericClientConstructor(
  PaymentServiceService,
  "payments.PaymentService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): PaymentServiceClient;
  service: typeof PaymentServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
